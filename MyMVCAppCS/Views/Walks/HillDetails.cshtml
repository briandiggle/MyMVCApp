@{
   Layout = null;  // get rid of the _SiteLayout.cshtml structure
}

@using System.Threading
@using MyMVCApp.DAL
@using MyMVCApp.Model
@model MyMVCApp.DAL.Hill


<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@Model.Hillname - Hill details</title>
    <link rel="stylesheet" href="~/Content/NewSite.css" />
    <link rel="stylesheet" href="https://labs.os.uk/public/os-api-branding/v0.3.1/os-api-branding.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.2/dist/leaflet.css" />
    <link rel="stylesheet" href="~/Content/MapStyle.css" />


    <script src="https://labs.os.uk/public/os-api-branding/v0.3.1/os-api-branding.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.2/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.7.0/proj4.js"></script>
    <script src="../../Scripts/os-transform.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4leaflet/1.0.2/proj4leaflet.min.js"></script>

</head>
<body>
    <div class="topnavbarbg-img">
        <div class="navbarcontainer">
            <ul class="navbarlist">
                <li class="left">
                    <a class="gold" href="#home">Brian's Walking Site</a>
                    @if (SessionSingleton.Current.DataTierTarget.Equals(WalkingConstants.LIVE_DB_TIER))
                    {
                        <sup>@Html.ActionLink("LIVE", "Index", "Config")</sup>
                    }
                    else
                    {
                        <sup>@Html.ActionLink("DEV", "Index", "Config")</sup>
                    }
                </li>
                <li class="right">@Html.ActionLink("Auto", "CreateAuto", "Walks")</li>
                <li class="right">@Html.ActionLink("Progress", "Index", "Progress")</li>
                <li class="right">@Html.ActionLink("Ascents", "Index", "HillAscent", new { OrderBy = "DateDesc" }, new { dummy = 0 })</li>
                <li class="right">@Html.ActionLink("Markers", "Index", "Marker")</li>
                <li class="right">@Html.ActionLink("Hills", "HillClasses", "Walks")</li>
                <li class="right">@Html.ActionLink("Areas", "Index", "Walks")</li>
                <li class="right">@Html.ActionLink("Wainwrights", "HillsInClassification", "Walks", new { id = "W" }, new { dummy = 0 })</li>
                <li class="right">@Html.ActionLink("Outlying", "HillsInClassification", "Walks", new { id = "WO" }, new { dummy = 0 }) </li>
                <li class="right">@Html.ActionLink("Birketts", "HillsInClassification", "Walks", new { id = "B" }, new { dummy = 0 })</li>
                <li class="right">@Html.ActionLink("Walks", "WalksByDate", "Walks", new { OrderBy = "DateDesc" }, new { dummy = 0 })</li>
                <li class="right">@Html.ActionLink("Add Walk", "Create", "Walks")</li>
                <li class="right">@Html.ActionLink("Search", "Index", "Search")</li>
            </ul>
        </div>
    </div>

    <div class="details">
        <table class="details_table">
            <tr>
                <td colspan="2" class="heading2">@Model.Hillname</td>

                <td class="heading2"></td>
                <td class="column4 heading3">@Html.Encode(String.Format("{0}", Model.Feet)) ft, @Html.Encode(String.Format("{0}", Model.Metres)) m</td>
            </tr>
            <tr>
                <td class="column1">First ascent:</td>
                <td class="column2">@Model.FirstClimbedDate</td>
                <td class="column3">Number of ascents: </td>
                <td class="column4">@Model.NumberOfAscents</td>
            </tr>
            <tr>
                <td class="column1">Grid reference:</td>
                <td class="column2">@Model.Gridref10</td>
                <td class="column3">Section:</td>
                <td class="column4">@Model._Section</td>
            </tr>
            <tr>
                <td class="column1">Feature:</td>
                <td class="column2">@Model.Feature</td>
                <td class="column3">Drop:</td>
                <td class="column4">@Model.Drop</td>
            </tr>
            <tr>
                <td class="column1">Classes:</td>
                <td class="column2">@Model.Classification</td>
                <td class="column3">EPSG:27000 coords:</td>
                <td class="column4">@Model.Xcoord , @Model.Ycoord</td>
            </tr>
        </table>
    </div>

    <div id="hillmap"></div>

    <div class="details">
        <table class="details_table">
            @{
                int iAscentCounter = 1;

                var oAscents = (List<HillAscent>)ViewData["HillAscents"];

                <tr>
                    <td colspan="4" class="heading2">Ascents</td>
                </tr>

                foreach (HillAscent oAscent in oAscents)
                {

                    <tr>
                        <td>@iAscentCounter.ToString(Thread.CurrentThread.CurrentCulture)</td>
                        <td>@Html.Encode(String.Format("{0:D}", oAscent.AscentDate))</td>
                        <td><a href="~/Walks/Details/@oAscent.Walk.WalkID">@oAscent.Walk.WalkTitle</a></td>
                        <td><a href="~/Walks/Details/@oAscent.Walk.WalkID">@oAscent.Walk.WalkSummary</a></td>
                    </tr>
                    iAscentCounter = iAscentCounter + 1;
                }

                if (iAscentCounter == 1)
                {
                    <tr>
                        <td colspan="4">No Ascents</td>
                    </tr>
                }
            }

        </table>
    </div>

    <div class="footernavbarbg-img">
        <div class="navbarcontainer">
            <ul class="navbarlist">
                <li class="left">
                    <a class="gold" href="#home">Brian's Walking Site</a>
                    @if (SessionSingleton.Current.DataTierTarget.Equals(WalkingConstants.LIVE_DB_TIER))
                    {
                        <sup>@Html.ActionLink("LIVE", "Index", "Config")</sup>
                    }
                    else
                    {
                        <sup>@Html.ActionLink("DEV", "Index", "Config")</sup>
                    }
                </li>
                <li class="right">@Html.ActionLink("Auto", "CreateAuto", "Walks")</li>
                <li class="right">@Html.ActionLink("Progress", "Index", "Progress")</li>
                <li class="right">@Html.ActionLink("Ascents", "Index", "HillAscent", new { OrderBy = "DateDesc" }, new { dummy = 0 })</li>
                <li class="right">@Html.ActionLink("Markers", "Index", "Marker")</li>
                <li class="right">@Html.ActionLink("Hills", "HillClasses", "Walks")</li>
                <li class="right">@Html.ActionLink("Areas", "Index", "Walks")</li>
                <li class="right">@Html.ActionLink("Wainwrights", "HillsInClassification", "Walks", new { id = "W" }, new { dummy = 0 })</li>
                <li class="right">@Html.ActionLink("Outlying", "HillsInClassification", "Walks", new { id = "WO" }, new { dummy = 0 }) </li>
                <li class="right">@Html.ActionLink("Birketts", "HillsInClassification", "Walks", new { id = "B" }, new { dummy = 0 })</li>
                <li class="right">@Html.ActionLink("Walks", "WalksByDate", "Walks", new { OrderBy = "DateDesc" }, new { dummy = 0 })</li>
                <li class="right">@Html.ActionLink("Add Walk", "Create", "Walks")</li>
                <li class="right">@Html.ActionLink("Search", "Index", "Search")</li>
            </ul>
        </div>
    </div>

    <script>

        // Function toInternationalDate ---------------------------------------------------------------------
        // Convert date/time string in format DD/MM/YYYY HH:MM:SS to standard javascript format YYYY/MM/DD
        const toInternationaDate = function (ukDate) {
            var startTimeLoc = ukDate.indexOf(' ');
            //Override end location if ukDate does not contain a time portion
            if (startTimeLoc == -1) {
                startTimeLoc = ukDate.length;
            }
            ukDateSplit = ukDate.substring(0,startTimeLoc).split('/');

            standardDay = ukDateSplit[0];
            standardMonth = ukDateSplit[1];
            standardYear = ukDateSplit[2];

            return new Date(standardYear, standardMonth, standardDay);
        }


        const apiKey = '468YAE3SzsjV8Uu8XPPDQpVVh2mA67vC';

        var firstClimbedDate = toInternationaDate("@Model.FirstClimbedDate");  // convert from british date format to standard js format
        var dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };

        // using  // https://github.com/OrdnanceSurvey/os-transform
        //const epsg27000_center = os.Transform.fromGridRef("NY 21541 07216");  // Returns { ea: 337297, no: 503695 } - center on scafell pike

        //----Define the map centre point by converting an os grid reference into ESPG:27000 coordinates
        const map_center = [@Model.Xcoord, @Model.Ycoord];

        // Setup the EPSG:27700 (British National Grid) projection.
        const crs = new L.Proj.CRS('EPSG:27700', '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +units=m +no_defs', {
            resolutions: [896.0, 448.0, 224.0, 112.0, 56.0, 28.0, 14.0, 7.0, 3.5, 1.75],
            origin: [-238375.0, 1376256.0]
        });

        // Leaflet works natively in WGS84 -a.k.a. EPSG:4326. The following function converts from OS National grid to this.
        const transformCoords = function (arr) {
            return proj4('EPSG:27700', 'EPSG:4326', arr).reverse();
        };


        // Define the options associated with the Leaflet map which will be created
        const mapOptions = {
            crs: crs,
            minZoom: 0,
            maxZoom: 9,
            center: transformCoords(map_center),
            zoom: 8,   // 8 this is the first 1:25000 zoom level
            maxBounds: [    // as defined by the EPSG:27000 coordinate system
                transformCoords([-238375.0, 0.0]),
                transformCoords([900000.0, 1376256.0])
            ],
            attributionControl: true
        };

        // Initialize the lealfet map.
        const map = L.map('hillmap', mapOptions);

        //---Add hill as a marker on the map-----------
        const hill_marker = L.marker(transformCoords([@Model.Xcoord, @Model.Ycoord]))
            .bindPopup("<b>@Model.Hillname" + ", @Model.Metres" +"m</b><br>First climbed: " + firstClimbedDate.toLocaleDateString("en-GB",dateOptions))
            .openPopup()
            .addTo(map); //Add hill marker to map, converting coords to WGS84

        // Finally load and display ZXY tile layer on the map.
        const basemap = L.tileLayer('https://api.os.uk/maps/raster/v1/zxy/Leisure_27700/{z}/{x}/{y}.png?key=' + apiKey).addTo(map);

    </script>

</body>
</html>
