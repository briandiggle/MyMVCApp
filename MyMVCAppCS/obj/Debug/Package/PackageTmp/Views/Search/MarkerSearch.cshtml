@using System.Threading
@using MyMVCApp.DAL
@using Newtonsoft.Json
@model MyMVCAppCS.ViewModels.MarkerSearchViewModel

@{ViewBag.Title = "Search walking database for Markers"; }

@section ViewSpecificHead
{
    <script src="../../Scripts/MicrosoftAjax.js" type="text/javascript"></script>
    <script src="../../Scripts/MicrosoftMvcValidation.js" type="text/javascript"></script>
}

<h2>Marker Search</h2>

@if (Model.MarkerResultsAvailable)
{
@Html.Raw(Model.SearchSummary)
                <p><strong> @(Model.MarkersFound.Count.ToString(Thread.CurrentThread.CurrentCulture)) markers found </strong></p>

                                <div class="spacerdiv"></div>
                                                <div id="hillmap"></div>
                                                                <div class="spacerdiv"></div>

                                                                                <table class="walksbydate">
                                                                                    <tr>
                                                                                        <th>No.</th>
                                                                                        <th>Marker Title</th>
                                                                                        <th>Hill</th>
                                                                                        <th>OS Grid Reference</th>
                                                                                        <th>Date left</th>
                                                                                        <th>Status</th>
                                                                                    </tr>

                                                                                    @{ int iResultCounter = 0;
                                                                                        foreach (Marker marker in Model.MarkersFound)
                                                                                        {
                                                                                            iResultCounter++;

                                                                        <tr>
                                                                            <td>@iResultCounter.ToString(Thread.CurrentThread.CurrentCulture) </td>
                                                                            <td>@Html.ActionLink(marker.MarkerTitle, "Details", "Marker", new { id = marker.MarkerID }, new { dummy = 1 })</td>
                                                                            <td>
                                                                                @if (marker.Hillnumber != null)
                                                                                {
                                                            @Html.ActionLink(marker.Hill.Hillname, "HillDetails", "Walks", new { id = marker.Hill.Hillnumber }, new { dummy = 1 })}
                                                                            </td>
                                                                            <td>@marker.GPS_Reference</td>
                                                                            <td>@marker.DateLeft.ToString("dd MMMM yyyy")</td>
                                                                            <td>@marker.Status.ToString()</td>
                                                                        </tr>
 } }
                                                                                </table>
}

<div class="spacerdiv"></div>
<div><strong>Modify your search:</strong></div>
<div class="spacerdiv"></div>

@using (Html.BeginForm())
{

@Html.ValidationSummary(true)


                <table class="walksbydate">
                    <tr>
                        <td class="header">Title</td>
                        <td>
                            @Html.TextBoxFor(model => model.SearchMarkerTitle, new { style = "width:300px" })
                            @Html.ValidationMessageFor(model => model.SearchMarkerTitle) use AND for multiple terms
                        </td>
                    </tr>
                    <tr>
                        <td class="header">Description</td>
                        <td>@Html.TextBoxFor(model => model.SearchMarkerDescription, new { style = "width:300px" })</td>
                    </tr>

                    <tr>
                        <td class="header">Hill Ascended</td>
                        <td>@Html.TextBoxFor(model => model.SearchMarkerHill, new { style = "width:300px" })</td>
                    </tr>
                    <tr>
                        <td class="header">Date left from</td>
                        <td>
                            @Html.TextBoxFor(model => model.DateFromDay, new { style = "width:50px" })
                            @Html.DropDownListFor(model => model.DateFromMonth, Model.DateFromMonthList)
                            @Html.TextBoxFor(model => model.DateFromYear, new { style = "width:50px" })<br />
                        </td>
                    </tr>
                    <tr>
                        <td class="header">Date left to</td>
                        <td>
                            @Html.TextBoxFor(model => model.DateToDay, new { style = "width:50px" })
                            @Html.DropDownListFor(model => model.DateToMonth, Model.DateToMonthList)
                            @Html.TextBoxFor(model => model.DateToYear, new { style = "width:50px" })
                        </td>
                    </tr>

                    <tr>
                        <td class="header">Field Combination</td>
                        <td>
                            @Html.DropDownListFor(model => model.FieldCombination, Model.FieldCombinationList)
                        </td>
                    </tr>

                    <tr>
                        <td></td>
                        <td>
                            <input type="submit" value="Search for Matching Markers" />
                        </td>
                    </tr>
                </table>}

<script>

    //---------------------------------------------------------------------------------------------------
    // The following script loads a leaflet map where data is available
    //----------------------------------------------------------------

    // Function toInternationalDate ---------------------------------------------------------------------
    // Convert date/time string in format DD/MM/YYYY HH:MM:SS to standard javascript format YYYY/MM/DD
    const toInternationaDate = function (ukDate) {
        var startTimeLoc = ukDate.indexOf(' ');

        //Override end location if ukDate does not contain a time portion
        if (startTimeLoc == -1) {
            startTimeLoc = ukDate.length;
        }

        ukDateSplit = ukDate.substring(0, startTimeLoc).split('/');

        standardDay = ukDateSplit[0];
        standardMonth = ukDateSplit[1];
        standardYear = ukDateSplit[2];

        return new Date(standardYear, standardMonth, standardDay);
    }

    var mineasting = 9999999;
    var maxeasting = -9999999;
    var minnorthing = 9999999;
    var maxnorthing = -9999999;

    //If there are any markers with GPS locations in the current page add them as markers to the map--------
    var markerdata =  @(Html.Raw(JsonConvert.SerializeObject(ViewData["MarkerMarkers"])));

    var markercoords = new Array(markerdata.length);
    var markerpopups = new Array(markerdata.length);

    for (let i = 0; i < markerdata.length; i++)
    {
        const epsg27000 = os.Transform.fromGridRef(markerdata[i].OSMap10);

        if (epsg27000.ea > maxeasting) {
            maxeasting = epsg27000.ea;
        }

        if (epsg27000.ea < mineasting) {
            mineasting = epsg27000.ea;
        }

        if (epsg27000.no > maxnorthing) {
            maxnorthing = epsg27000.no;
        }

        if (epsg27000.no < minnorthing) {
            minnorthing = epsg27000.no;
        }

        markercoords[i] = [epsg27000.ea, epsg27000.no];
        markerpopups[i] = markerdata[i].popupText;
    }
    //----If GPS data is available associated with the the current page of markers, then display the map----
    const OSapiKey = '468YAE3SzsjV8Uu8XPPDQpVVh2mA67vC';

    // using  // https://github.com/OrdnanceSurvey/os-transform
    //----Define the map centre point by converting an os grid reference into ESPG:27000 coordinates

    const map_center = [54.5, -3.09];

    // Setup the EPSG:27700 (British National Grid) projection.
    const crs = new L.Proj.CRS('EPSG:27700', '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +units=m +no_defs', {
    resolutions: [896.0, 448.0, 224.0, 112.0, 56.0, 28.0, 14.0, 7.0, 3.5, 1.75],
    origin: [-238375.0, 1376256.0]
    });

    // Leaflet works natively in WGS84 -a.k.a. EPSG:4326. The following function converts from OS National grid easting and northing to this.
    const transformCoords = function (arr) {
    return proj4('EPSG:27700', 'EPSG:4326', arr).reverse();
    };

    // Define the options associated with the Leaflet map which will be created
    const mapOptions = {
    crs: crs,
    minZoom: 0,
    maxZoom: 9,
    center: map_center,
    zoom: 8,   // 8 this is the first 1:25000 zoom level
    maxBounds: [    // as defined by the EPSG:27000 coordinate system
    transformCoords([-238375.0, 0.0]),
    transformCoords([900000.0, 1376256.0])
    ],
    attributionControl: true
    };

    // Initialize the lealfet map.
    const map = L.map('hillmap', mapOptions);

    if (markerdata != null) {

        let markeroptions = {
            zIndexOffset: 1000
        };


        //---Add the markers to the map

        for (let i = 0; i < markerdata.length; i++) {
            var thislat = markercoords[i][0];
            var thislong = markercoords[i][1];
            const popText = markerpopups[i];
            const popupOptions = {
                className: "markerPopup"
            }
            marker = new L.marker(transformCoords([thislat, thislong]), markeroptions)
                .bindPopup(popText, popupOptions)
                .openPopup()
                .addTo(map);
        }

        //----Set the bounds of the map so that all the markers are displayed
        map.fitBounds(
            [
                transformCoords([mineasting, minnorthing]),
                transformCoords([maxeasting, maxnorthing])
            ]
        );

    }

    console.log("Now loading the tile layer using OS API...");

    // Finally load and display ZXY tile layer on the map.
    const basemap = L.tileLayer('https://api.os.uk/maps/raster/v1/zxy/Leisure_27700/{z}/{x}/{y}.png?key=' + OSapiKey).addTo(map);


</script>



