'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="walking")>  _
Partial Public Class WalkingDB
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
    Partial Private Sub InsertWalkType(instance As WalkingMVC.WalkType)
    End Sub
    Partial Private Sub UpdateWalkType(instance As WalkingMVC.WalkType)
    End Sub
    Partial Private Sub DeleteWalkType(instance As WalkingMVC.WalkType)
    End Sub
    Partial Private Sub InsertArealink(instance As WalkingMVC.Arealink)
    End Sub
    Partial Private Sub UpdateArealink(instance As WalkingMVC.Arealink)
    End Sub
    Partial Private Sub DeleteArealink(instance As WalkingMVC.Arealink)
    End Sub
    Partial Private Sub InsertArea(instance As WalkingMVC.Area)
    End Sub
    Partial Private Sub UpdateArea(instance As WalkingMVC.Area)
    End Sub
    Partial Private Sub DeleteArea(instance As WalkingMVC.Area)
    End Sub
    Partial Private Sub InsertAreaType(instance As WalkingMVC.AreaType)
    End Sub
    Partial Private Sub UpdateAreaType(instance As WalkingMVC.AreaType)
    End Sub
    Partial Private Sub DeleteAreaType(instance As WalkingMVC.AreaType)
    End Sub
    Partial Private Sub InsertClass(instance As WalkingMVC.Class)
    End Sub
    Partial Private Sub UpdateClass(instance As WalkingMVC.Class)
    End Sub
    Partial Private Sub DeleteClass(instance As WalkingMVC.Class)
    End Sub
    Partial Private Sub InsertClasslink(instance As WalkingMVC.Classlink)
    End Sub
    Partial Private Sub UpdateClasslink(instance As WalkingMVC.Classlink)
    End Sub
    Partial Private Sub DeleteClasslink(instance As WalkingMVC.Classlink)
    End Sub
    Partial Private Sub InsertHillAscent(instance As WalkingMVC.HillAscent)
    End Sub
    Partial Private Sub UpdateHillAscent(instance As WalkingMVC.HillAscent)
    End Sub
    Partial Private Sub DeleteHillAscent(instance As WalkingMVC.HillAscent)
    End Sub
    Partial Private Sub InsertHill(instance As WalkingMVC.Hill)
    End Sub
    Partial Private Sub UpdateHill(instance As WalkingMVC.Hill)
    End Sub
    Partial Private Sub DeleteHill(instance As WalkingMVC.Hill)
    End Sub
    Partial Private Sub InsertMarker(instance As WalkingMVC.Marker)
    End Sub
    Partial Private Sub UpdateMarker(instance As WalkingMVC.Marker)
    End Sub
    Partial Private Sub DeleteMarker(instance As WalkingMVC.Marker)
    End Sub
    Partial Private Sub InsertMarker_Observation(instance As WalkingMVC.Marker_Observation)
    End Sub
    Partial Private Sub UpdateMarker_Observation(instance As WalkingMVC.Marker_Observation)
    End Sub
    Partial Private Sub DeleteMarker_Observation(instance As WalkingMVC.Marker_Observation)
    End Sub
    Partial Private Sub InsertMarker_Status(instance As WalkingMVC.Marker_Status)
    End Sub
    Partial Private Sub UpdateMarker_Status(instance As WalkingMVC.Marker_Status)
    End Sub
    Partial Private Sub DeleteMarker_Status(instance As WalkingMVC.Marker_Status)
    End Sub
    Partial Private Sub InsertWalk_AssociatedFile_Type(instance As WalkingMVC.Walk_AssociatedFile_Type)
    End Sub
    Partial Private Sub UpdateWalk_AssociatedFile_Type(instance As WalkingMVC.Walk_AssociatedFile_Type)
    End Sub
    Partial Private Sub DeleteWalk_AssociatedFile_Type(instance As WalkingMVC.Walk_AssociatedFile_Type)
    End Sub
    Partial Private Sub InsertWalk_AssociatedFile(instance As WalkingMVC.Walk_AssociatedFile)
    End Sub
    Partial Private Sub UpdateWalk_AssociatedFile(instance As WalkingMVC.Walk_AssociatedFile)
    End Sub
    Partial Private Sub DeleteWalk_AssociatedFile(instance As WalkingMVC.Walk_AssociatedFile)
    End Sub
    Partial Private Sub InsertWalk(instance As WalkingMVC.Walk)
    End Sub
    Partial Private Sub UpdateWalk(instance As WalkingMVC.Walk)
    End Sub
    Partial Private Sub DeleteWalk(instance As WalkingMVC.Walk)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("walkingLIVE").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property WalkTypes() As System.Data.Linq.Table(Of WalkingMVC.WalkType)
		Get
			Return Me.GetTable(Of WalkingMVC.WalkType)
		End Get
	End Property
	
	Public ReadOnly Property Arealinks() As System.Data.Linq.Table(Of WalkingMVC.Arealink)
		Get
			Return Me.GetTable(Of WalkingMVC.Arealink)
		End Get
	End Property
	
	Public ReadOnly Property Areas() As System.Data.Linq.Table(Of WalkingMVC.Area)
		Get
			Return Me.GetTable(Of WalkingMVC.Area)
		End Get
	End Property
	
	Public ReadOnly Property AreaTypes() As System.Data.Linq.Table(Of WalkingMVC.AreaType)
		Get
			Return Me.GetTable(Of WalkingMVC.AreaType)
		End Get
	End Property
	
	Public ReadOnly Property Classes() As System.Data.Linq.Table(Of WalkingMVC.[Class])
		Get
			Return Me.GetTable(Of WalkingMVC.[Class])
		End Get
	End Property
	
	Public ReadOnly Property Classlinks() As System.Data.Linq.Table(Of WalkingMVC.Classlink)
		Get
			Return Me.GetTable(Of WalkingMVC.Classlink)
		End Get
	End Property
	
	Public ReadOnly Property HillAscents() As System.Data.Linq.Table(Of WalkingMVC.HillAscent)
		Get
			Return Me.GetTable(Of WalkingMVC.HillAscent)
		End Get
	End Property
	
	Public ReadOnly Property Hills() As System.Data.Linq.Table(Of WalkingMVC.Hill)
		Get
			Return Me.GetTable(Of WalkingMVC.Hill)
		End Get
	End Property
	
	Public ReadOnly Property Markers() As System.Data.Linq.Table(Of WalkingMVC.Marker)
		Get
			Return Me.GetTable(Of WalkingMVC.Marker)
		End Get
	End Property
	
	Public ReadOnly Property Marker_Observations() As System.Data.Linq.Table(Of WalkingMVC.Marker_Observation)
		Get
			Return Me.GetTable(Of WalkingMVC.Marker_Observation)
		End Get
	End Property
	
	Public ReadOnly Property Marker_Status() As System.Data.Linq.Table(Of WalkingMVC.Marker_Status)
		Get
			Return Me.GetTable(Of WalkingMVC.Marker_Status)
		End Get
	End Property
	
	Public ReadOnly Property MarylynParentChilds() As System.Data.Linq.Table(Of WalkingMVC.MarylynParentChild)
		Get
			Return Me.GetTable(Of WalkingMVC.MarylynParentChild)
		End Get
	End Property
	
	Public ReadOnly Property Walk_AssociatedFile_Types() As System.Data.Linq.Table(Of WalkingMVC.Walk_AssociatedFile_Type)
		Get
			Return Me.GetTable(Of WalkingMVC.Walk_AssociatedFile_Type)
		End Get
	End Property
	
	Public ReadOnly Property Walk_AssociatedFiles() As System.Data.Linq.Table(Of WalkingMVC.Walk_AssociatedFile)
		Get
			Return Me.GetTable(Of WalkingMVC.Walk_AssociatedFile)
		End Get
	End Property
	
	Public ReadOnly Property Walks() As System.Data.Linq.Table(Of WalkingMVC.Walk)
		Get
			Return Me.GetTable(Of WalkingMVC.Walk)
		End Get
	End Property
	
	Public ReadOnly Property MyProgresses() As System.Data.Linq.Table(Of WalkingMVC.MyProgress)
		Get
			Return Me.GetTable(Of WalkingMVC.MyProgress)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_GetMyProgress")>  _
	Public Function sp_GetMyProgress() As ISingleResult(Of WalkingMVC.MyProgress)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of WalkingMVC.MyProgress))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_GetMyProgressByClassType")>  _
	Public Function sp_GetMyProgressByClassType(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ClassType", DbType:="Char(1)")> ByVal classType As System.Nullable(Of Char)) As ISingleResult(Of WalkingMVC.MyProgress)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), classType)
		Return CType(result.ReturnValue,ISingleResult(Of WalkingMVC.MyProgress))
	End Function
End Class

Namespace WalkingMVC
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WalkTypes")>  _
	Partial Public Class WalkType
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _WalkTypeString As String
		
		Private _Walks As EntitySet(Of Walk)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWalkTypeStringChanging(value As String)
    End Sub
    Partial Private Sub OnWalkTypeStringChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Walks = New EntitySet(Of Walk)(AddressOf Me.attach_Walks, AddressOf Me.detach_Walks)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkTypeString", DbType:="NVarChar(30) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property WalkTypeString() As String
			Get
				Return Me._WalkTypeString
			End Get
			Set
				If (String.Equals(Me._WalkTypeString, value) = false) Then
					Me.OnWalkTypeStringChanging(value)
					Me.SendPropertyChanging
					Me._WalkTypeString = value
					Me.SendPropertyChanged("WalkTypeString")
					Me.OnWalkTypeStringChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="WalkType_Walk", Storage:="_Walks", ThisKey:="WalkTypeString", OtherKey:="WalkType")>  _
		Public Property Walks() As EntitySet(Of Walk)
			Get
				Return Me._Walks
			End Get
			Set
				Me._Walks.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Walks(ByVal entity As Walk)
			Me.SendPropertyChanging
			entity.WalkType1 = Me
		End Sub
		
		Private Sub detach_Walks(ByVal entity As Walk)
			Me.SendPropertyChanging
			entity.WalkType1 = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Arealink")>  _
	Partial Public Class Arealink
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Hillnumber As Short
		
		Private _Arearef As String
		
		Private _Alt_Area As Boolean
		
		Private _AreaLinkID As Integer
		
		Private _Hill As EntityRef(Of Hill)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnHillnumberChanging(value As Short)
    End Sub
    Partial Private Sub OnHillnumberChanged()
    End Sub
    Partial Private Sub OnArearefChanging(value As String)
    End Sub
    Partial Private Sub OnArearefChanged()
    End Sub
    Partial Private Sub OnAlt_AreaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAlt_AreaChanged()
    End Sub
    Partial Private Sub OnAreaLinkIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAreaLinkIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Hill = CType(Nothing, EntityRef(Of Hill))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hillnumber", DbType:="SmallInt NOT NULL")>  _
		Public Property Hillnumber() As Short
			Get
				Return Me._Hillnumber
			End Get
			Set
				If ((Me._Hillnumber = value)  _
							= false) Then
					If Me._Hill.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnHillnumberChanging(value)
					Me.SendPropertyChanging
					Me._Hillnumber = value
					Me.SendPropertyChanged("Hillnumber")
					Me.OnHillnumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Arearef", DbType:="Char(10) NOT NULL", CanBeNull:=false)>  _
		Public Property Arearef() As String
			Get
				Return Me._Arearef
			End Get
			Set
				If (String.Equals(Me._Arearef, value) = false) Then
					Me.OnArearefChanging(value)
					Me.SendPropertyChanging
					Me._Arearef = value
					Me.SendPropertyChanged("Arearef")
					Me.OnArearefChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Alt_Area", DbType:="Bit NOT NULL")>  _
		Public Property Alt_Area() As Boolean
			Get
				Return Me._Alt_Area
			End Get
			Set
				If ((Me._Alt_Area = value)  _
							= false) Then
					Me.OnAlt_AreaChanging(value)
					Me.SendPropertyChanging
					Me._Alt_Area = value
					Me.SendPropertyChanged("Alt_Area")
					Me.OnAlt_AreaChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AreaLinkID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property AreaLinkID() As Integer
			Get
				Return Me._AreaLinkID
			End Get
			Set
				If ((Me._AreaLinkID = value)  _
							= false) Then
					Me.OnAreaLinkIDChanging(value)
					Me.SendPropertyChanging
					Me._AreaLinkID = value
					Me.SendPropertyChanged("AreaLinkID")
					Me.OnAreaLinkIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hill_Arealink", Storage:="_Hill", ThisKey:="Hillnumber", OtherKey:="Hillnumber", IsForeignKey:=true)>  _
		Public Property Hill() As Hill
			Get
				Return Me._Hill.Entity
			End Get
			Set
				Dim previousValue As Hill = Me._Hill.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Hill.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Hill.Entity = Nothing
						previousValue.Arealinks.Remove(Me)
					End If
					Me._Hill.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Arealinks.Add(Me)
						Me._Hillnumber = value.Hillnumber
					Else
						Me._Hillnumber = CType(Nothing, Short)
					End If
					Me.SendPropertyChanged("Hill")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Areas")>  _
	Partial Public Class Area
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Country As String
		
		Private _Arearef As String
		
		Private _Shortname As String
		
		Private _Areaname As String
		
		Private _AreaType As System.Nullable(Of Char)
		
		Private _Walks As EntitySet(Of Walk)
		
		Private _AreaType1 As EntityRef(Of AreaType)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnArearefChanging(value As String)
    End Sub
    Partial Private Sub OnArearefChanged()
    End Sub
    Partial Private Sub OnShortnameChanging(value As String)
    End Sub
    Partial Private Sub OnShortnameChanged()
    End Sub
    Partial Private Sub OnAreanameChanging(value As String)
    End Sub
    Partial Private Sub OnAreanameChanged()
    End Sub
    Partial Private Sub OnAreaTypeChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnAreaTypeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Walks = New EntitySet(Of Walk)(AddressOf Me.attach_Walks, AddressOf Me.detach_Walks)
			Me._AreaType1 = CType(Nothing, EntityRef(Of AreaType))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="Char(2) NOT NULL", CanBeNull:=false)>  _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set
				If (String.Equals(Me._Country, value) = false) Then
					Me.OnCountryChanging(value)
					Me.SendPropertyChanging
					Me._Country = value
					Me.SendPropertyChanged("Country")
					Me.OnCountryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Arearef", DbType:="Char(10) NOT NULL", CanBeNull:=false)>  _
		Public Property Arearef() As String
			Get
				Return Me._Arearef
			End Get
			Set
				If (String.Equals(Me._Arearef, value) = false) Then
					Me.OnArearefChanging(value)
					Me.SendPropertyChanging
					Me._Arearef = value
					Me.SendPropertyChanged("Arearef")
					Me.OnArearefChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Shortname", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property Shortname() As String
			Get
				Return Me._Shortname
			End Get
			Set
				If (String.Equals(Me._Shortname, value) = false) Then
					Me.OnShortnameChanging(value)
					Me.SendPropertyChanging
					Me._Shortname = value
					Me.SendPropertyChanged("Shortname")
					Me.OnShortnameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Areaname", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Areaname() As String
			Get
				Return Me._Areaname
			End Get
			Set
				If (String.Equals(Me._Areaname, value) = false) Then
					Me.OnAreanameChanging(value)
					Me.SendPropertyChanging
					Me._Areaname = value
					Me.SendPropertyChanged("Areaname")
					Me.OnAreanameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AreaType", DbType:="Char(1)")>  _
		Public Property AreaType() As System.Nullable(Of Char)
			Get
				Return Me._AreaType
			End Get
			Set
				If (Me._AreaType.Equals(value) = false) Then
					If Me._AreaType1.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnAreaTypeChanging(value)
					Me.SendPropertyChanging
					Me._AreaType = value
					Me.SendPropertyChanged("AreaType")
					Me.OnAreaTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Area_Walk", Storage:="_Walks", ThisKey:="Areaname", OtherKey:="WalkAreaName")>  _
		Public Property Walks() As EntitySet(Of Walk)
			Get
				Return Me._Walks
			End Get
			Set
				Me._Walks.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AreaType_Area", Storage:="_AreaType1", ThisKey:="AreaType", OtherKey:="AreaType", IsForeignKey:=true)>  _
		Public Property AreaType1() As AreaType
			Get
				Return Me._AreaType1.Entity
			End Get
			Set
				Dim previousValue As AreaType = Me._AreaType1.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AreaType1.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AreaType1.Entity = Nothing
						previousValue.Areas.Remove(Me)
					End If
					Me._AreaType1.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Areas.Add(Me)
						Me._AreaType = value.AreaType
					Else
						Me._AreaType = CType(Nothing, Nullable(Of Char))
					End If
					Me.SendPropertyChanged("AreaType1")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Walks(ByVal entity As Walk)
			Me.SendPropertyChanging
			entity.Area = Me
		End Sub
		
		Private Sub detach_Walks(ByVal entity As Walk)
			Me.SendPropertyChanging
			entity.Area = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AreaTypes")>  _
	Partial Public Class AreaType
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _AreaType As Char
		
		Private _AreaTypeName As String
		
		Private _Areas As EntitySet(Of Area)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAreaTypeChanging(value As Char)
    End Sub
    Partial Private Sub OnAreaTypeChanged()
    End Sub
    Partial Private Sub OnAreaTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnAreaTypeNameChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Areas = New EntitySet(Of Area)(AddressOf Me.attach_Areas, AddressOf Me.detach_Areas)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AreaType", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true)>  _
		Public Property AreaType() As Char
			Get
				Return Me._AreaType
			End Get
			Set
				If ((Me._AreaType = value)  _
							= false) Then
					Me.OnAreaTypeChanging(value)
					Me.SendPropertyChanging
					Me._AreaType = value
					Me.SendPropertyChanged("AreaType")
					Me.OnAreaTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AreaTypeName", DbType:="NChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property AreaTypeName() As String
			Get
				Return Me._AreaTypeName
			End Get
			Set
				If (String.Equals(Me._AreaTypeName, value) = false) Then
					Me.OnAreaTypeNameChanging(value)
					Me.SendPropertyChanging
					Me._AreaTypeName = value
					Me.SendPropertyChanged("AreaTypeName")
					Me.OnAreaTypeNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AreaType_Area", Storage:="_Areas", ThisKey:="AreaType", OtherKey:="AreaType")>  _
		Public Property Areas() As EntitySet(Of Area)
			Get
				Return Me._Areas
			End Get
			Set
				Me._Areas.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Areas(ByVal entity As Area)
			Me.SendPropertyChanging
			entity.AreaType1 = Me
		End Sub
		
		Private Sub detach_Areas(ByVal entity As Area)
			Me.SendPropertyChanging
			entity.AreaType1 = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Class")>  _
	Partial Public Class [Class]
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _SortSeq As Short
		
		Private _Classref As String
		
		Private _Classname As String
		
		Private _ClassType As Char
		
		Private _Classlinks As EntitySet(Of Classlink)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSortSeqChanging(value As Short)
    End Sub
    Partial Private Sub OnSortSeqChanged()
    End Sub
    Partial Private Sub OnClassrefChanging(value As String)
    End Sub
    Partial Private Sub OnClassrefChanged()
    End Sub
    Partial Private Sub OnClassnameChanging(value As String)
    End Sub
    Partial Private Sub OnClassnameChanged()
    End Sub
    Partial Private Sub OnClassTypeChanging(value As Char)
    End Sub
    Partial Private Sub OnClassTypeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Classlinks = New EntitySet(Of Classlink)(AddressOf Me.attach_Classlinks, AddressOf Me.detach_Classlinks)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortSeq", DbType:="SmallInt NOT NULL")>  _
		Public Property SortSeq() As Short
			Get
				Return Me._SortSeq
			End Get
			Set
				If ((Me._SortSeq = value)  _
							= false) Then
					Me.OnSortSeqChanging(value)
					Me.SendPropertyChanging
					Me._SortSeq = value
					Me.SendPropertyChanged("SortSeq")
					Me.OnSortSeqChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Classref", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Classref() As String
			Get
				Return Me._Classref
			End Get
			Set
				If (String.Equals(Me._Classref, value) = false) Then
					Me.OnClassrefChanging(value)
					Me.SendPropertyChanging
					Me._Classref = value
					Me.SendPropertyChanged("Classref")
					Me.OnClassrefChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Classname", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
		Public Property Classname() As String
			Get
				Return Me._Classname
			End Get
			Set
				If (String.Equals(Me._Classname, value) = false) Then
					Me.OnClassnameChanging(value)
					Me.SendPropertyChanging
					Me._Classname = value
					Me.SendPropertyChanged("Classname")
					Me.OnClassnameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClassType")>  _
		Public Property ClassType() As Char
			Get
				Return Me._ClassType
			End Get
			Set
				If ((Me._ClassType = value)  _
							= false) Then
					Me.OnClassTypeChanging(value)
					Me.SendPropertyChanging
					Me._ClassType = value
					Me.SendPropertyChanged("ClassType")
					Me.OnClassTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Class_Classlink", Storage:="_Classlinks", ThisKey:="Classref", OtherKey:="Classref")>  _
		Public Property Classlinks() As EntitySet(Of Classlink)
			Get
				Return Me._Classlinks
			End Get
			Set
				Me._Classlinks.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Classlinks(ByVal entity As Classlink)
			Me.SendPropertyChanging
			entity.[Class] = Me
		End Sub
		
		Private Sub detach_Classlinks(ByVal entity As Classlink)
			Me.SendPropertyChanging
			entity.[Class] = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Classlink")>  _
	Partial Public Class Classlink
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Hillnumber As Short
		
		Private _Classref As String
		
		Private _ClasslinkID As Integer
		
		Private _Class As EntityRef(Of [Class])
		
		Private _Hill As EntityRef(Of Hill)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnHillnumberChanging(value As Short)
    End Sub
    Partial Private Sub OnHillnumberChanged()
    End Sub
    Partial Private Sub OnClassrefChanging(value As String)
    End Sub
    Partial Private Sub OnClassrefChanged()
    End Sub
    Partial Private Sub OnClasslinkIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnClasslinkIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Class = CType(Nothing, EntityRef(Of [Class]))
			Me._Hill = CType(Nothing, EntityRef(Of Hill))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hillnumber", DbType:="SmallInt NOT NULL")>  _
		Public Property Hillnumber() As Short
			Get
				Return Me._Hillnumber
			End Get
			Set
				If ((Me._Hillnumber = value)  _
							= false) Then
					If Me._Hill.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnHillnumberChanging(value)
					Me.SendPropertyChanging
					Me._Hillnumber = value
					Me.SendPropertyChanged("Hillnumber")
					Me.OnHillnumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Classref", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
		Public Property Classref() As String
			Get
				Return Me._Classref
			End Get
			Set
				If (String.Equals(Me._Classref, value) = false) Then
					If Me._Class.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnClassrefChanging(value)
					Me.SendPropertyChanging
					Me._Classref = value
					Me.SendPropertyChanged("Classref")
					Me.OnClassrefChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClasslinkID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ClasslinkID() As Integer
			Get
				Return Me._ClasslinkID
			End Get
			Set
				If ((Me._ClasslinkID = value)  _
							= false) Then
					Me.OnClasslinkIDChanging(value)
					Me.SendPropertyChanging
					Me._ClasslinkID = value
					Me.SendPropertyChanged("ClasslinkID")
					Me.OnClasslinkIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Class_Classlink", Storage:="_Class", ThisKey:="Classref", OtherKey:="Classref", IsForeignKey:=true)>  _
		Public Property [Class]() As [Class]
			Get
				Return Me._Class.Entity
			End Get
			Set
				Dim previousValue As [Class] = Me._Class.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Class.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Class.Entity = Nothing
						previousValue.Classlinks.Remove(Me)
					End If
					Me._Class.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Classlinks.Add(Me)
						Me._Classref = value.Classref
					Else
						Me._Classref = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("[Class]")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hill_Classlink", Storage:="_Hill", ThisKey:="Hillnumber", OtherKey:="Hillnumber", IsForeignKey:=true)>  _
		Public Property Hill() As Hill
			Get
				Return Me._Hill.Entity
			End Get
			Set
				Dim previousValue As Hill = Me._Hill.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Hill.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Hill.Entity = Nothing
						previousValue.Classlinks.Remove(Me)
					End If
					Me._Hill.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Classlinks.Add(Me)
						Me._Hillnumber = value.Hillnumber
					Else
						Me._Hillnumber = CType(Nothing, Short)
					End If
					Me.SendPropertyChanged("Hill")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HillAscent")>  _
	Partial Public Class HillAscent
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _AscentID As Integer
		
		Private _AscentDate As Date
		
		Private _Hillnumber As Short
		
		Private _WalkID As Integer
		
		Private _Hill As EntityRef(Of Hill)
		
		Private _Walk As EntityRef(Of Walk)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAscentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAscentIDChanged()
    End Sub
    Partial Private Sub OnAscentDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAscentDateChanged()
    End Sub
    Partial Private Sub OnHillnumberChanging(value As Short)
    End Sub
    Partial Private Sub OnHillnumberChanged()
    End Sub
    Partial Private Sub OnWalkIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWalkIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Hill = CType(Nothing, EntityRef(Of Hill))
			Me._Walk = CType(Nothing, EntityRef(Of Walk))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AscentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property AscentID() As Integer
			Get
				Return Me._AscentID
			End Get
			Set
				If ((Me._AscentID = value)  _
							= false) Then
					Me.OnAscentIDChanging(value)
					Me.SendPropertyChanging
					Me._AscentID = value
					Me.SendPropertyChanged("AscentID")
					Me.OnAscentIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AscentDate", DbType:="DateTime NOT NULL")>  _
		Public Property AscentDate() As Date
			Get
				Return Me._AscentDate
			End Get
			Set
				If ((Me._AscentDate = value)  _
							= false) Then
					Me.OnAscentDateChanging(value)
					Me.SendPropertyChanging
					Me._AscentDate = value
					Me.SendPropertyChanged("AscentDate")
					Me.OnAscentDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hillnumber", DbType:="SmallInt NOT NULL")>  _
		Public Property Hillnumber() As Short
			Get
				Return Me._Hillnumber
			End Get
			Set
				If ((Me._Hillnumber = value)  _
							= false) Then
					If Me._Hill.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnHillnumberChanging(value)
					Me.SendPropertyChanging
					Me._Hillnumber = value
					Me.SendPropertyChanged("Hillnumber")
					Me.OnHillnumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkID", DbType:="Int NOT NULL")>  _
		Public Property WalkID() As Integer
			Get
				Return Me._WalkID
			End Get
			Set
				If ((Me._WalkID = value)  _
							= false) Then
					If Me._Walk.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnWalkIDChanging(value)
					Me.SendPropertyChanging
					Me._WalkID = value
					Me.SendPropertyChanged("WalkID")
					Me.OnWalkIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hill_HillAscent", Storage:="_Hill", ThisKey:="Hillnumber", OtherKey:="Hillnumber", IsForeignKey:=true)>  _
		Public Property Hill() As Hill
			Get
				Return Me._Hill.Entity
			End Get
			Set
				Dim previousValue As Hill = Me._Hill.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Hill.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Hill.Entity = Nothing
						previousValue.HillAscents.Remove(Me)
					End If
					Me._Hill.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.HillAscents.Add(Me)
						Me._Hillnumber = value.Hillnumber
					Else
						Me._Hillnumber = CType(Nothing, Short)
					End If
					Me.SendPropertyChanged("Hill")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Walk_HillAscent", Storage:="_Walk", ThisKey:="WalkID", OtherKey:="WalkID", IsForeignKey:=true)>  _
		Public Property Walk() As Walk
			Get
				Return Me._Walk.Entity
			End Get
			Set
				Dim previousValue As Walk = Me._Walk.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Walk.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Walk.Entity = Nothing
						previousValue.HillAscents.Remove(Me)
					End If
					Me._Walk.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.HillAscents.Add(Me)
						Me._WalkID = value.WalkID
					Else
						Me._WalkID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Walk")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Hills")>  _
	Partial Public Class Hill
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Hillnumber As Short
		
		Private _Hillname As String
		
		Private __Section As System.Nullable(Of Double)
		
		Private _Classification As String
		
		Private _Metres As Double
		
		Private _Feet As System.Nullable(Of Double)
		
		Private _Gridref As String
		
		Private _Gridref10 As String
		
		Private _Colgridref As String
		
		Private _Colheight As System.Nullable(Of Double)
		
		Private _Drop As System.Nullable(Of Double)
		
		Private _Feature As String
		
		Private _Observations As String
		
		Private _Survey As String
		
		Private _Revision As System.Nullable(Of Date)
		
		Private _Comments As String
		
		Private _Map As String
		
		Private _Map25 As String
		
		Private _Xcoord As System.Nullable(Of Integer)
		
		Private _Ycoord As System.Nullable(Of Integer)
		
		Private _Latitude As System.Nullable(Of Double)
		
		Private _Longitude As System.Nullable(Of Double)
		
		Private _NumberOfAscents As Short
		
		Private _FirstClimbedDate As System.Nullable(Of Date)
		
		Private _Arealinks As EntitySet(Of Arealink)
		
		Private _Classlinks As EntitySet(Of Classlink)
		
		Private _HillAscents As EntitySet(Of HillAscent)
		
		Private _Markers As EntitySet(Of Marker)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnHillnumberChanging(value As Short)
    End Sub
    Partial Private Sub OnHillnumberChanged()
    End Sub
    Partial Private Sub OnHillnameChanging(value As String)
    End Sub
    Partial Private Sub OnHillnameChanged()
    End Sub
    Partial Private Sub On_SectionChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub On_SectionChanged()
    End Sub
    Partial Private Sub OnClassificationChanging(value As String)
    End Sub
    Partial Private Sub OnClassificationChanged()
    End Sub
    Partial Private Sub OnMetresChanging(value As Double)
    End Sub
    Partial Private Sub OnMetresChanged()
    End Sub
    Partial Private Sub OnFeetChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnFeetChanged()
    End Sub
    Partial Private Sub OnGridrefChanging(value As String)
    End Sub
    Partial Private Sub OnGridrefChanged()
    End Sub
    Partial Private Sub OnGridref10Changing(value As String)
    End Sub
    Partial Private Sub OnGridref10Changed()
    End Sub
    Partial Private Sub OnColgridrefChanging(value As String)
    End Sub
    Partial Private Sub OnColgridrefChanged()
    End Sub
    Partial Private Sub OnColheightChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnColheightChanged()
    End Sub
    Partial Private Sub OnDropChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDropChanged()
    End Sub
    Partial Private Sub OnFeatureChanging(value As String)
    End Sub
    Partial Private Sub OnFeatureChanged()
    End Sub
    Partial Private Sub OnObservationsChanging(value As String)
    End Sub
    Partial Private Sub OnObservationsChanged()
    End Sub
    Partial Private Sub OnSurveyChanging(value As String)
    End Sub
    Partial Private Sub OnSurveyChanged()
    End Sub
    Partial Private Sub OnRevisionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRevisionChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    Partial Private Sub OnMapChanging(value As String)
    End Sub
    Partial Private Sub OnMapChanged()
    End Sub
    Partial Private Sub OnMap25Changing(value As String)
    End Sub
    Partial Private Sub OnMap25Changed()
    End Sub
    Partial Private Sub OnXcoordChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnXcoordChanged()
    End Sub
    Partial Private Sub OnYcoordChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYcoordChanged()
    End Sub
    Partial Private Sub OnLatitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnLatitudeChanged()
    End Sub
    Partial Private Sub OnLongitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnLongitudeChanged()
    End Sub
    Partial Private Sub OnNumberOfAscentsChanging(value As Short)
    End Sub
    Partial Private Sub OnNumberOfAscentsChanged()
    End Sub
    Partial Private Sub OnFirstClimbedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFirstClimbedDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Arealinks = New EntitySet(Of Arealink)(AddressOf Me.attach_Arealinks, AddressOf Me.detach_Arealinks)
			Me._Classlinks = New EntitySet(Of Classlink)(AddressOf Me.attach_Classlinks, AddressOf Me.detach_Classlinks)
			Me._HillAscents = New EntitySet(Of HillAscent)(AddressOf Me.attach_HillAscents, AddressOf Me.detach_HillAscents)
			Me._Markers = New EntitySet(Of Marker)(AddressOf Me.attach_Markers, AddressOf Me.detach_Markers)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hillnumber", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
		Public Property Hillnumber() As Short
			Get
				Return Me._Hillnumber
			End Get
			Set
				If ((Me._Hillnumber = value)  _
							= false) Then
					Me.OnHillnumberChanging(value)
					Me.SendPropertyChanging
					Me._Hillnumber = value
					Me.SendPropertyChanged("Hillnumber")
					Me.OnHillnumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hillname", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property Hillname() As String
			Get
				Return Me._Hillname
			End Get
			Set
				If (String.Equals(Me._Hillname, value) = false) Then
					Me.OnHillnameChanging(value)
					Me.SendPropertyChanging
					Me._Hillname = value
					Me.SendPropertyChanged("Hillname")
					Me.OnHillnameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[_Section]", Storage:="__Section", DbType:="Float")>  _
		Public Property _Section() As System.Nullable(Of Double)
			Get
				Return Me.__Section
			End Get
			Set
				If (Me.__Section.Equals(value) = false) Then
					Me.On_SectionChanging(value)
					Me.SendPropertyChanging
					Me.__Section = value
					Me.SendPropertyChanged("_Section")
					Me.On_SectionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Classification", DbType:="NVarChar(50)")>  _
		Public Property Classification() As String
			Get
				Return Me._Classification
			End Get
			Set
				If (String.Equals(Me._Classification, value) = false) Then
					Me.OnClassificationChanging(value)
					Me.SendPropertyChanging
					Me._Classification = value
					Me.SendPropertyChanged("Classification")
					Me.OnClassificationChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Metres", DbType:="Float NOT NULL")>  _
		Public Property Metres() As Double
			Get
				Return Me._Metres
			End Get
			Set
				If ((Me._Metres = value)  _
							= false) Then
					Me.OnMetresChanging(value)
					Me.SendPropertyChanging
					Me._Metres = value
					Me.SendPropertyChanged("Metres")
					Me.OnMetresChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Feet", DbType:="Float")>  _
		Public Property Feet() As System.Nullable(Of Double)
			Get
				Return Me._Feet
			End Get
			Set
				If (Me._Feet.Equals(value) = false) Then
					Me.OnFeetChanging(value)
					Me.SendPropertyChanging
					Me._Feet = value
					Me.SendPropertyChanged("Feet")
					Me.OnFeetChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gridref", DbType:="NVarChar(8)")>  _
		Public Property Gridref() As String
			Get
				Return Me._Gridref
			End Get
			Set
				If (String.Equals(Me._Gridref, value) = false) Then
					Me.OnGridrefChanging(value)
					Me.SendPropertyChanging
					Me._Gridref = value
					Me.SendPropertyChanged("Gridref")
					Me.OnGridrefChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gridref10", DbType:="NVarChar(14)")>  _
		Public Property Gridref10() As String
			Get
				Return Me._Gridref10
			End Get
			Set
				If (String.Equals(Me._Gridref10, value) = false) Then
					Me.OnGridref10Changing(value)
					Me.SendPropertyChanging
					Me._Gridref10 = value
					Me.SendPropertyChanged("Gridref10")
					Me.OnGridref10Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Colgridref", DbType:="NVarChar(40)")>  _
		Public Property Colgridref() As String
			Get
				Return Me._Colgridref
			End Get
			Set
				If (String.Equals(Me._Colgridref, value) = false) Then
					Me.OnColgridrefChanging(value)
					Me.SendPropertyChanging
					Me._Colgridref = value
					Me.SendPropertyChanged("Colgridref")
					Me.OnColgridrefChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Colheight", DbType:="Float")>  _
		Public Property Colheight() As System.Nullable(Of Double)
			Get
				Return Me._Colheight
			End Get
			Set
				If (Me._Colheight.Equals(value) = false) Then
					Me.OnColheightChanging(value)
					Me.SendPropertyChanging
					Me._Colheight = value
					Me.SendPropertyChanged("Colheight")
					Me.OnColheightChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Drop]", Storage:="_Drop", DbType:="Float")>  _
		Public Property Drop() As System.Nullable(Of Double)
			Get
				Return Me._Drop
			End Get
			Set
				If (Me._Drop.Equals(value) = false) Then
					Me.OnDropChanging(value)
					Me.SendPropertyChanging
					Me._Drop = value
					Me.SendPropertyChanged("Drop")
					Me.OnDropChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Feature", DbType:="NVarChar(255)")>  _
		Public Property Feature() As String
			Get
				Return Me._Feature
			End Get
			Set
				If (String.Equals(Me._Feature, value) = false) Then
					Me.OnFeatureChanging(value)
					Me.SendPropertyChanging
					Me._Feature = value
					Me.SendPropertyChanged("Feature")
					Me.OnFeatureChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observations", DbType:="NVarChar(255)")>  _
		Public Property Observations() As String
			Get
				Return Me._Observations
			End Get
			Set
				If (String.Equals(Me._Observations, value) = false) Then
					Me.OnObservationsChanging(value)
					Me.SendPropertyChanging
					Me._Observations = value
					Me.SendPropertyChanged("Observations")
					Me.OnObservationsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Survey", DbType:="NVarChar(255)")>  _
		Public Property Survey() As String
			Get
				Return Me._Survey
			End Get
			Set
				If (String.Equals(Me._Survey, value) = false) Then
					Me.OnSurveyChanging(value)
					Me.SendPropertyChanging
					Me._Survey = value
					Me.SendPropertyChanged("Survey")
					Me.OnSurveyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Revision", DbType:="DateTime")>  _
		Public Property Revision() As System.Nullable(Of Date)
			Get
				Return Me._Revision
			End Get
			Set
				If (Me._Revision.Equals(value) = false) Then
					Me.OnRevisionChanging(value)
					Me.SendPropertyChanging
					Me._Revision = value
					Me.SendPropertyChanged("Revision")
					Me.OnRevisionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comments", DbType:="NVarChar(255)")>  _
		Public Property Comments() As String
			Get
				Return Me._Comments
			End Get
			Set
				If (String.Equals(Me._Comments, value) = false) Then
					Me.OnCommentsChanging(value)
					Me.SendPropertyChanging
					Me._Comments = value
					Me.SendPropertyChanged("Comments")
					Me.OnCommentsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Map", DbType:="NVarChar(15)")>  _
		Public Property Map() As String
			Get
				Return Me._Map
			End Get
			Set
				If (String.Equals(Me._Map, value) = false) Then
					Me.OnMapChanging(value)
					Me.SendPropertyChanging
					Me._Map = value
					Me.SendPropertyChanged("Map")
					Me.OnMapChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Map25", DbType:="NVarChar(20)")>  _
		Public Property Map25() As String
			Get
				Return Me._Map25
			End Get
			Set
				If (String.Equals(Me._Map25, value) = false) Then
					Me.OnMap25Changing(value)
					Me.SendPropertyChanging
					Me._Map25 = value
					Me.SendPropertyChanged("Map25")
					Me.OnMap25Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Xcoord", DbType:="Int")>  _
		Public Property Xcoord() As System.Nullable(Of Integer)
			Get
				Return Me._Xcoord
			End Get
			Set
				If (Me._Xcoord.Equals(value) = false) Then
					Me.OnXcoordChanging(value)
					Me.SendPropertyChanging
					Me._Xcoord = value
					Me.SendPropertyChanged("Xcoord")
					Me.OnXcoordChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ycoord", DbType:="Int")>  _
		Public Property Ycoord() As System.Nullable(Of Integer)
			Get
				Return Me._Ycoord
			End Get
			Set
				If (Me._Ycoord.Equals(value) = false) Then
					Me.OnYcoordChanging(value)
					Me.SendPropertyChanging
					Me._Ycoord = value
					Me.SendPropertyChanged("Ycoord")
					Me.OnYcoordChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="Float")>  _
		Public Property Latitude() As System.Nullable(Of Double)
			Get
				Return Me._Latitude
			End Get
			Set
				If (Me._Latitude.Equals(value) = false) Then
					Me.OnLatitudeChanging(value)
					Me.SendPropertyChanging
					Me._Latitude = value
					Me.SendPropertyChanged("Latitude")
					Me.OnLatitudeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="Float")>  _
		Public Property Longitude() As System.Nullable(Of Double)
			Get
				Return Me._Longitude
			End Get
			Set
				If (Me._Longitude.Equals(value) = false) Then
					Me.OnLongitudeChanging(value)
					Me.SendPropertyChanging
					Me._Longitude = value
					Me.SendPropertyChanged("Longitude")
					Me.OnLongitudeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberOfAscents", DbType:="SmallInt NOT NULL")>  _
		Public Property NumberOfAscents() As Short
			Get
				Return Me._NumberOfAscents
			End Get
			Set
				If ((Me._NumberOfAscents = value)  _
							= false) Then
					Me.OnNumberOfAscentsChanging(value)
					Me.SendPropertyChanging
					Me._NumberOfAscents = value
					Me.SendPropertyChanged("NumberOfAscents")
					Me.OnNumberOfAscentsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstClimbedDate", DbType:="DateTime")>  _
		Public Property FirstClimbedDate() As System.Nullable(Of Date)
			Get
				Return Me._FirstClimbedDate
			End Get
			Set
				If (Me._FirstClimbedDate.Equals(value) = false) Then
					Me.OnFirstClimbedDateChanging(value)
					Me.SendPropertyChanging
					Me._FirstClimbedDate = value
					Me.SendPropertyChanged("FirstClimbedDate")
					Me.OnFirstClimbedDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hill_Arealink", Storage:="_Arealinks", ThisKey:="Hillnumber", OtherKey:="Hillnumber")>  _
		Public Property Arealinks() As EntitySet(Of Arealink)
			Get
				Return Me._Arealinks
			End Get
			Set
				Me._Arealinks.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hill_Classlink", Storage:="_Classlinks", ThisKey:="Hillnumber", OtherKey:="Hillnumber")>  _
		Public Property Classlinks() As EntitySet(Of Classlink)
			Get
				Return Me._Classlinks
			End Get
			Set
				Me._Classlinks.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hill_HillAscent", Storage:="_HillAscents", ThisKey:="Hillnumber", OtherKey:="Hillnumber")>  _
		Public Property HillAscents() As EntitySet(Of HillAscent)
			Get
				Return Me._HillAscents
			End Get
			Set
				Me._HillAscents.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hill_Marker", Storage:="_Markers", ThisKey:="Hillnumber", OtherKey:="Hillnumber")>  _
		Public Property Markers() As EntitySet(Of Marker)
			Get
				Return Me._Markers
			End Get
			Set
				Me._Markers.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Arealinks(ByVal entity As Arealink)
			Me.SendPropertyChanging
			entity.Hill = Me
		End Sub
		
		Private Sub detach_Arealinks(ByVal entity As Arealink)
			Me.SendPropertyChanging
			entity.Hill = Nothing
		End Sub
		
		Private Sub attach_Classlinks(ByVal entity As Classlink)
			Me.SendPropertyChanging
			entity.Hill = Me
		End Sub
		
		Private Sub detach_Classlinks(ByVal entity As Classlink)
			Me.SendPropertyChanging
			entity.Hill = Nothing
		End Sub
		
		Private Sub attach_HillAscents(ByVal entity As HillAscent)
			Me.SendPropertyChanging
			entity.Hill = Me
		End Sub
		
		Private Sub detach_HillAscents(ByVal entity As HillAscent)
			Me.SendPropertyChanging
			entity.Hill = Nothing
		End Sub
		
		Private Sub attach_Markers(ByVal entity As Marker)
			Me.SendPropertyChanging
			entity.Hill = Me
		End Sub
		
		Private Sub detach_Markers(ByVal entity As Marker)
			Me.SendPropertyChanging
			entity.Hill = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Marker")>  _
	Partial Public Class Marker
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _MarkerID As Integer
		
		Private _MarkerTitle As String
		
		Private _Hillnumber As System.Nullable(Of Short)
		
		Private _GPS_Reference As String
		
		Private _Location_Description As String
		
		Private _WalkID As System.Nullable(Of Integer)
		
		Private _DateLeft As Date
		
		Private _Status As String
		
		Private _Marker_Observations As EntitySet(Of Marker_Observation)
		
		Private _Walk_AssociatedFiles As EntitySet(Of Walk_AssociatedFile)
		
		Private _Hill As EntityRef(Of Hill)
		
		Private _Marker_Status As EntityRef(Of Marker_Status)
		
		Private _Walk As EntityRef(Of Walk)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMarkerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMarkerIDChanged()
    End Sub
    Partial Private Sub OnMarkerTitleChanging(value As String)
    End Sub
    Partial Private Sub OnMarkerTitleChanged()
    End Sub
    Partial Private Sub OnHillnumberChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnHillnumberChanged()
    End Sub
    Partial Private Sub OnGPS_ReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnGPS_ReferenceChanged()
    End Sub
    Partial Private Sub OnLocation_DescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnLocation_DescriptionChanged()
    End Sub
    Partial Private Sub OnWalkIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnWalkIDChanged()
    End Sub
    Partial Private Sub OnDateLeftChanging(value As Date)
    End Sub
    Partial Private Sub OnDateLeftChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Marker_Observations = New EntitySet(Of Marker_Observation)(AddressOf Me.attach_Marker_Observations, AddressOf Me.detach_Marker_Observations)
			Me._Walk_AssociatedFiles = New EntitySet(Of Walk_AssociatedFile)(AddressOf Me.attach_Walk_AssociatedFiles, AddressOf Me.detach_Walk_AssociatedFiles)
			Me._Hill = CType(Nothing, EntityRef(Of Hill))
			Me._Marker_Status = CType(Nothing, EntityRef(Of Marker_Status))
			Me._Walk = CType(Nothing, EntityRef(Of Walk))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MarkerID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property MarkerID() As Integer
			Get
				Return Me._MarkerID
			End Get
			Set
				If ((Me._MarkerID = value)  _
							= false) Then
					Me.OnMarkerIDChanging(value)
					Me.SendPropertyChanging
					Me._MarkerID = value
					Me.SendPropertyChanged("MarkerID")
					Me.OnMarkerIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MarkerTitle", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property MarkerTitle() As String
			Get
				Return Me._MarkerTitle
			End Get
			Set
				If (String.Equals(Me._MarkerTitle, value) = false) Then
					Me.OnMarkerTitleChanging(value)
					Me.SendPropertyChanging
					Me._MarkerTitle = value
					Me.SendPropertyChanged("MarkerTitle")
					Me.OnMarkerTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hillnumber", DbType:="SmallInt")>  _
		Public Property Hillnumber() As System.Nullable(Of Short)
			Get
				Return Me._Hillnumber
			End Get
			Set
				If (Me._Hillnumber.Equals(value) = false) Then
					If Me._Hill.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnHillnumberChanging(value)
					Me.SendPropertyChanging
					Me._Hillnumber = value
					Me.SendPropertyChanged("Hillnumber")
					Me.OnHillnumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GPS_Reference", DbType:="NChar(14)")>  _
		Public Property GPS_Reference() As String
			Get
				Return Me._GPS_Reference
			End Get
			Set
				If (String.Equals(Me._GPS_Reference, value) = false) Then
					Me.OnGPS_ReferenceChanging(value)
					Me.SendPropertyChanging
					Me._GPS_Reference = value
					Me.SendPropertyChanged("GPS_Reference")
					Me.OnGPS_ReferenceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location_Description", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Location_Description() As String
			Get
				Return Me._Location_Description
			End Get
			Set
				If (String.Equals(Me._Location_Description, value) = false) Then
					Me.OnLocation_DescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Location_Description = value
					Me.SendPropertyChanged("Location_Description")
					Me.OnLocation_DescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkID", DbType:="Int")>  _
		Public Property WalkID() As System.Nullable(Of Integer)
			Get
				Return Me._WalkID
			End Get
			Set
				If (Me._WalkID.Equals(value) = false) Then
					If Me._Walk.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnWalkIDChanging(value)
					Me.SendPropertyChanging
					Me._WalkID = value
					Me.SendPropertyChanged("WalkID")
					Me.OnWalkIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateLeft", DbType:="DateTime NOT NULL")>  _
		Public Property DateLeft() As Date
			Get
				Return Me._DateLeft
			End Get
			Set
				If ((Me._DateLeft = value)  _
							= false) Then
					Me.OnDateLeftChanging(value)
					Me.SendPropertyChanging
					Me._DateLeft = value
					Me.SendPropertyChanged("DateLeft")
					Me.OnDateLeftChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="NChar(40) NOT NULL", CanBeNull:=false)>  _
		Public Property Status() As String
			Get
				Return Me._Status
			End Get
			Set
				If (String.Equals(Me._Status, value) = false) Then
					If Me._Marker_Status.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnStatusChanging(value)
					Me.SendPropertyChanging
					Me._Status = value
					Me.SendPropertyChanged("Status")
					Me.OnStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Marker_Marker_Observation", Storage:="_Marker_Observations", ThisKey:="MarkerID", OtherKey:="MarkerID")>  _
		Public Property Marker_Observations() As EntitySet(Of Marker_Observation)
			Get
				Return Me._Marker_Observations
			End Get
			Set
				Me._Marker_Observations.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Marker_Walk_AssociatedFile", Storage:="_Walk_AssociatedFiles", ThisKey:="MarkerID", OtherKey:="Walk_AssociatedFile_MarkerID")>  _
		Public Property Walk_AssociatedFiles() As EntitySet(Of Walk_AssociatedFile)
			Get
				Return Me._Walk_AssociatedFiles
			End Get
			Set
				Me._Walk_AssociatedFiles.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hill_Marker", Storage:="_Hill", ThisKey:="Hillnumber", OtherKey:="Hillnumber", IsForeignKey:=true)>  _
		Public Property Hill() As Hill
			Get
				Return Me._Hill.Entity
			End Get
			Set
				Dim previousValue As Hill = Me._Hill.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Hill.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Hill.Entity = Nothing
						previousValue.Markers.Remove(Me)
					End If
					Me._Hill.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Markers.Add(Me)
						Me._Hillnumber = value.Hillnumber
					Else
						Me._Hillnumber = CType(Nothing, Nullable(Of Short))
					End If
					Me.SendPropertyChanged("Hill")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Marker_Status_Marker", Storage:="_Marker_Status", ThisKey:="Status", OtherKey:="Marker_Status", IsForeignKey:=true)>  _
		Public Property Marker_Status() As Marker_Status
			Get
				Return Me._Marker_Status.Entity
			End Get
			Set
				Dim previousValue As Marker_Status = Me._Marker_Status.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Marker_Status.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Marker_Status.Entity = Nothing
						previousValue.Markers.Remove(Me)
					End If
					Me._Marker_Status.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Markers.Add(Me)
						Me._Status = value.Marker_Status
					Else
						Me._Status = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Marker_Status")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Walk_Marker", Storage:="_Walk", ThisKey:="WalkID", OtherKey:="WalkID", IsForeignKey:=true)>  _
		Public Property Walk() As Walk
			Get
				Return Me._Walk.Entity
			End Get
			Set
				Dim previousValue As Walk = Me._Walk.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Walk.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Walk.Entity = Nothing
						previousValue.Markers.Remove(Me)
					End If
					Me._Walk.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Markers.Add(Me)
						Me._WalkID = value.WalkID
					Else
						Me._WalkID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Walk")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Marker_Observations(ByVal entity As Marker_Observation)
			Me.SendPropertyChanging
			entity.Marker = Me
		End Sub
		
		Private Sub detach_Marker_Observations(ByVal entity As Marker_Observation)
			Me.SendPropertyChanging
			entity.Marker = Nothing
		End Sub
		
		Private Sub attach_Walk_AssociatedFiles(ByVal entity As Walk_AssociatedFile)
			Me.SendPropertyChanging
			entity.Marker = Me
		End Sub
		
		Private Sub detach_Walk_AssociatedFiles(ByVal entity As Walk_AssociatedFile)
			Me.SendPropertyChanging
			entity.Marker = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Marker_Observation")>  _
	Partial Public Class Marker_Observation
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _MarkerObservationID As Integer
		
		Private _MarkerID As Integer
		
		Private _FoundFlag As Boolean
		
		Private _WalkID As Integer
		
		Private _ObservationText As String
		
		Private _DateOfObservation As Date
		
		Private _Marker As EntityRef(Of Marker)
		
		Private _Walk As EntityRef(Of Walk)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMarkerObservationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMarkerObservationIDChanged()
    End Sub
    Partial Private Sub OnMarkerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMarkerIDChanged()
    End Sub
    Partial Private Sub OnFoundFlagChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFoundFlagChanged()
    End Sub
    Partial Private Sub OnWalkIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWalkIDChanged()
    End Sub
    Partial Private Sub OnObservationTextChanging(value As String)
    End Sub
    Partial Private Sub OnObservationTextChanged()
    End Sub
    Partial Private Sub OnDateOfObservationChanging(value As Date)
    End Sub
    Partial Private Sub OnDateOfObservationChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Marker = CType(Nothing, EntityRef(Of Marker))
			Me._Walk = CType(Nothing, EntityRef(Of Walk))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MarkerObservationID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property MarkerObservationID() As Integer
			Get
				Return Me._MarkerObservationID
			End Get
			Set
				If ((Me._MarkerObservationID = value)  _
							= false) Then
					Me.OnMarkerObservationIDChanging(value)
					Me.SendPropertyChanging
					Me._MarkerObservationID = value
					Me.SendPropertyChanged("MarkerObservationID")
					Me.OnMarkerObservationIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MarkerID", DbType:="Int NOT NULL")>  _
		Public Property MarkerID() As Integer
			Get
				Return Me._MarkerID
			End Get
			Set
				If ((Me._MarkerID = value)  _
							= false) Then
					If Me._Marker.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnMarkerIDChanging(value)
					Me.SendPropertyChanging
					Me._MarkerID = value
					Me.SendPropertyChanged("MarkerID")
					Me.OnMarkerIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FoundFlag", DbType:="Bit NOT NULL")>  _
		Public Property FoundFlag() As Boolean
			Get
				Return Me._FoundFlag
			End Get
			Set
				If ((Me._FoundFlag = value)  _
							= false) Then
					Me.OnFoundFlagChanging(value)
					Me.SendPropertyChanging
					Me._FoundFlag = value
					Me.SendPropertyChanged("FoundFlag")
					Me.OnFoundFlagChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkID", DbType:="Int NOT NULL")>  _
		Public Property WalkID() As Integer
			Get
				Return Me._WalkID
			End Get
			Set
				If ((Me._WalkID = value)  _
							= false) Then
					If Me._Walk.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnWalkIDChanging(value)
					Me.SendPropertyChanging
					Me._WalkID = value
					Me.SendPropertyChanged("WalkID")
					Me.OnWalkIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ObservationText", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property ObservationText() As String
			Get
				Return Me._ObservationText
			End Get
			Set
				If (String.Equals(Me._ObservationText, value) = false) Then
					Me.OnObservationTextChanging(value)
					Me.SendPropertyChanging
					Me._ObservationText = value
					Me.SendPropertyChanged("ObservationText")
					Me.OnObservationTextChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfObservation", DbType:="DateTime NOT NULL")>  _
		Public Property DateOfObservation() As Date
			Get
				Return Me._DateOfObservation
			End Get
			Set
				If ((Me._DateOfObservation = value)  _
							= false) Then
					Me.OnDateOfObservationChanging(value)
					Me.SendPropertyChanging
					Me._DateOfObservation = value
					Me.SendPropertyChanged("DateOfObservation")
					Me.OnDateOfObservationChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Marker_Marker_Observation", Storage:="_Marker", ThisKey:="MarkerID", OtherKey:="MarkerID", IsForeignKey:=true)>  _
		Public Property Marker() As Marker
			Get
				Return Me._Marker.Entity
			End Get
			Set
				Dim previousValue As Marker = Me._Marker.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Marker.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Marker.Entity = Nothing
						previousValue.Marker_Observations.Remove(Me)
					End If
					Me._Marker.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Marker_Observations.Add(Me)
						Me._MarkerID = value.MarkerID
					Else
						Me._MarkerID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Marker")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Walk_Marker_Observation", Storage:="_Walk", ThisKey:="WalkID", OtherKey:="WalkID", IsForeignKey:=true)>  _
		Public Property Walk() As Walk
			Get
				Return Me._Walk.Entity
			End Get
			Set
				Dim previousValue As Walk = Me._Walk.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Walk.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Walk.Entity = Nothing
						previousValue.Marker_Observations.Remove(Me)
					End If
					Me._Walk.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Marker_Observations.Add(Me)
						Me._WalkID = value.WalkID
					Else
						Me._WalkID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Walk")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Marker_Status")>  _
	Partial Public Class Marker_Status
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Marker_Status As String
		
		Private _Markers As EntitySet(Of Marker)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMarker_StatusChanging(value As String)
    End Sub
    Partial Private Sub OnMarker_StatusChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Markers = New EntitySet(Of Marker)(AddressOf Me.attach_Markers, AddressOf Me.detach_Markers)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Marker_Status", DbType:="NChar(40) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Marker_Status() As String
			Get
				Return Me._Marker_Status
			End Get
			Set
				If (String.Equals(Me._Marker_Status, value) = false) Then
					Me.OnMarker_StatusChanging(value)
					Me.SendPropertyChanging
					Me._Marker_Status = value
					Me.SendPropertyChanged("Marker_Status")
					Me.OnMarker_StatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Marker_Status_Marker", Storage:="_Markers", ThisKey:="Marker_Status", OtherKey:="Status")>  _
		Public Property Markers() As EntitySet(Of Marker)
			Get
				Return Me._Markers
			End Get
			Set
				Me._Markers.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Markers(ByVal entity As Marker)
			Me.SendPropertyChanging
			entity.Marker_Status = Me
		End Sub
		
		Private Sub detach_Markers(ByVal entity As Marker)
			Me.SendPropertyChanging
			entity.Marker_Status = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MarylynParentChild")>  _
	Partial Public Class MarylynParentChild
		
		Private _MarlylnParentChildID As Integer
		
		Private _ParentRegionAreaRef As String
		
		Private _ChildRegionAreaRef As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MarlylnParentChildID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
		Public Property MarlylnParentChildID() As Integer
			Get
				Return Me._MarlylnParentChildID
			End Get
			Set
				If ((Me._MarlylnParentChildID = value)  _
							= false) Then
					Me._MarlylnParentChildID = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentRegionAreaRef", DbType:="Char(10) NOT NULL", CanBeNull:=false)>  _
		Public Property ParentRegionAreaRef() As String
			Get
				Return Me._ParentRegionAreaRef
			End Get
			Set
				If (String.Equals(Me._ParentRegionAreaRef, value) = false) Then
					Me._ParentRegionAreaRef = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChildRegionAreaRef", DbType:="Char(10) NOT NULL", CanBeNull:=false)>  _
		Public Property ChildRegionAreaRef() As String
			Get
				Return Me._ChildRegionAreaRef
			End Get
			Set
				If (String.Equals(Me._ChildRegionAreaRef, value) = false) Then
					Me._ChildRegionAreaRef = value
				End If
			End Set
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Walk_AssociatedFile_Types")>  _
	Partial Public Class Walk_AssociatedFile_Type
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Walk_AssociatedFile_Type As String
		
		Private _Walk_AssociatedFiles As EntitySet(Of Walk_AssociatedFile)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWalk_AssociatedFile_TypeChanging(value As String)
    End Sub
    Partial Private Sub OnWalk_AssociatedFile_TypeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Walk_AssociatedFiles = New EntitySet(Of Walk_AssociatedFile)(AddressOf Me.attach_Walk_AssociatedFiles, AddressOf Me.detach_Walk_AssociatedFiles)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Walk_AssociatedFile_Type", DbType:="VarChar(40) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Walk_AssociatedFile_Type() As String
			Get
				Return Me._Walk_AssociatedFile_Type
			End Get
			Set
				If (String.Equals(Me._Walk_AssociatedFile_Type, value) = false) Then
					Me.OnWalk_AssociatedFile_TypeChanging(value)
					Me.SendPropertyChanging
					Me._Walk_AssociatedFile_Type = value
					Me.SendPropertyChanged("Walk_AssociatedFile_Type")
					Me.OnWalk_AssociatedFile_TypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Walk_AssociatedFile_Type_Walk_AssociatedFile", Storage:="_Walk_AssociatedFiles", ThisKey:="Walk_AssociatedFile_Type", OtherKey:="Walk_AssociatedFile_Type")>  _
		Public Property Walk_AssociatedFiles() As EntitySet(Of Walk_AssociatedFile)
			Get
				Return Me._Walk_AssociatedFiles
			End Get
			Set
				Me._Walk_AssociatedFiles.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Walk_AssociatedFiles(ByVal entity As Walk_AssociatedFile)
			Me.SendPropertyChanging
			entity.Walk_AssociatedFile_Type1 = Me
		End Sub
		
		Private Sub detach_Walk_AssociatedFiles(ByVal entity As Walk_AssociatedFile)
			Me.SendPropertyChanging
			entity.Walk_AssociatedFile_Type1 = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Walk_AssociatedFiles")>  _
	Partial Public Class Walk_AssociatedFile
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Walk_AssociatedFileID As Integer
		
		Private _WalkID As Integer
		
		Private _Walk_AssociatedFile_Name As String
		
		Private _Walk_AssociatedFile_Type As String
		
		Private _Walk_AssociatedFile_Sequence As Short
		
		Private _Walk_AssociatedFile_Caption As String
		
		Private _Walk_AssociatedFile_MarkerID As System.Nullable(Of Integer)
		
		Private _Marker As EntityRef(Of Marker)
		
		Private _Walk_AssociatedFile_Type1 As EntityRef(Of Walk_AssociatedFile_Type)
		
		Private _Walk As EntityRef(Of Walk)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWalk_AssociatedFileIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWalk_AssociatedFileIDChanged()
    End Sub
    Partial Private Sub OnWalkIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWalkIDChanged()
    End Sub
    Partial Private Sub OnWalk_AssociatedFile_NameChanging(value As String)
    End Sub
    Partial Private Sub OnWalk_AssociatedFile_NameChanged()
    End Sub
    Partial Private Sub OnWalk_AssociatedFile_TypeChanging(value As String)
    End Sub
    Partial Private Sub OnWalk_AssociatedFile_TypeChanged()
    End Sub
    Partial Private Sub OnWalk_AssociatedFile_SequenceChanging(value As Short)
    End Sub
    Partial Private Sub OnWalk_AssociatedFile_SequenceChanged()
    End Sub
    Partial Private Sub OnWalk_AssociatedFile_CaptionChanging(value As String)
    End Sub
    Partial Private Sub OnWalk_AssociatedFile_CaptionChanged()
    End Sub
    Partial Private Sub OnWalk_AssociatedFile_MarkerIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnWalk_AssociatedFile_MarkerIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Marker = CType(Nothing, EntityRef(Of Marker))
			Me._Walk_AssociatedFile_Type1 = CType(Nothing, EntityRef(Of Walk_AssociatedFile_Type))
			Me._Walk = CType(Nothing, EntityRef(Of Walk))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Walk_AssociatedFileID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property Walk_AssociatedFileID() As Integer
			Get
				Return Me._Walk_AssociatedFileID
			End Get
			Set
				If ((Me._Walk_AssociatedFileID = value)  _
							= false) Then
					Me.OnWalk_AssociatedFileIDChanging(value)
					Me.SendPropertyChanging
					Me._Walk_AssociatedFileID = value
					Me.SendPropertyChanged("Walk_AssociatedFileID")
					Me.OnWalk_AssociatedFileIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkID", DbType:="Int NOT NULL")>  _
		Public Property WalkID() As Integer
			Get
				Return Me._WalkID
			End Get
			Set
				If ((Me._WalkID = value)  _
							= false) Then
					If Me._Walk.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnWalkIDChanging(value)
					Me.SendPropertyChanging
					Me._WalkID = value
					Me.SendPropertyChanged("WalkID")
					Me.OnWalkIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Walk_AssociatedFile_Name", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
		Public Property Walk_AssociatedFile_Name() As String
			Get
				Return Me._Walk_AssociatedFile_Name
			End Get
			Set
				If (String.Equals(Me._Walk_AssociatedFile_Name, value) = false) Then
					Me.OnWalk_AssociatedFile_NameChanging(value)
					Me.SendPropertyChanging
					Me._Walk_AssociatedFile_Name = value
					Me.SendPropertyChanged("Walk_AssociatedFile_Name")
					Me.OnWalk_AssociatedFile_NameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Walk_AssociatedFile_Type", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
		Public Property Walk_AssociatedFile_Type() As String
			Get
				Return Me._Walk_AssociatedFile_Type
			End Get
			Set
				If (String.Equals(Me._Walk_AssociatedFile_Type, value) = false) Then
					If Me._Walk_AssociatedFile_Type1.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnWalk_AssociatedFile_TypeChanging(value)
					Me.SendPropertyChanging
					Me._Walk_AssociatedFile_Type = value
					Me.SendPropertyChanged("Walk_AssociatedFile_Type")
					Me.OnWalk_AssociatedFile_TypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Walk_AssociatedFile_Sequence", DbType:="SmallInt NOT NULL")>  _
		Public Property Walk_AssociatedFile_Sequence() As Short
			Get
				Return Me._Walk_AssociatedFile_Sequence
			End Get
			Set
				If ((Me._Walk_AssociatedFile_Sequence = value)  _
							= false) Then
					Me.OnWalk_AssociatedFile_SequenceChanging(value)
					Me.SendPropertyChanging
					Me._Walk_AssociatedFile_Sequence = value
					Me.SendPropertyChanged("Walk_AssociatedFile_Sequence")
					Me.OnWalk_AssociatedFile_SequenceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Walk_AssociatedFile_Caption", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Walk_AssociatedFile_Caption() As String
			Get
				Return Me._Walk_AssociatedFile_Caption
			End Get
			Set
				If (String.Equals(Me._Walk_AssociatedFile_Caption, value) = false) Then
					Me.OnWalk_AssociatedFile_CaptionChanging(value)
					Me.SendPropertyChanging
					Me._Walk_AssociatedFile_Caption = value
					Me.SendPropertyChanged("Walk_AssociatedFile_Caption")
					Me.OnWalk_AssociatedFile_CaptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Walk_AssociatedFile_MarkerID", DbType:="Int")>  _
		Public Property Walk_AssociatedFile_MarkerID() As System.Nullable(Of Integer)
			Get
				Return Me._Walk_AssociatedFile_MarkerID
			End Get
			Set
				If (Me._Walk_AssociatedFile_MarkerID.Equals(value) = false) Then
					If Me._Marker.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnWalk_AssociatedFile_MarkerIDChanging(value)
					Me.SendPropertyChanging
					Me._Walk_AssociatedFile_MarkerID = value
					Me.SendPropertyChanged("Walk_AssociatedFile_MarkerID")
					Me.OnWalk_AssociatedFile_MarkerIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Marker_Walk_AssociatedFile", Storage:="_Marker", ThisKey:="Walk_AssociatedFile_MarkerID", OtherKey:="MarkerID", IsForeignKey:=true)>  _
		Public Property Marker() As Marker
			Get
				Return Me._Marker.Entity
			End Get
			Set
				Dim previousValue As Marker = Me._Marker.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Marker.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Marker.Entity = Nothing
						previousValue.Walk_AssociatedFiles.Remove(Me)
					End If
					Me._Marker.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Walk_AssociatedFiles.Add(Me)
						Me._Walk_AssociatedFile_MarkerID = value.MarkerID
					Else
						Me._Walk_AssociatedFile_MarkerID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Marker")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Walk_AssociatedFile_Type_Walk_AssociatedFile", Storage:="_Walk_AssociatedFile_Type1", ThisKey:="Walk_AssociatedFile_Type", OtherKey:="Walk_AssociatedFile_Type", IsForeignKey:=true)>  _
		Public Property Walk_AssociatedFile_Type1() As Walk_AssociatedFile_Type
			Get
				Return Me._Walk_AssociatedFile_Type1.Entity
			End Get
			Set
				Dim previousValue As Walk_AssociatedFile_Type = Me._Walk_AssociatedFile_Type1.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Walk_AssociatedFile_Type1.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Walk_AssociatedFile_Type1.Entity = Nothing
						previousValue.Walk_AssociatedFiles.Remove(Me)
					End If
					Me._Walk_AssociatedFile_Type1.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Walk_AssociatedFiles.Add(Me)
						Me._Walk_AssociatedFile_Type = value.Walk_AssociatedFile_Type
					Else
						Me._Walk_AssociatedFile_Type = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Walk_AssociatedFile_Type1")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Walk_Walk_AssociatedFile", Storage:="_Walk", ThisKey:="WalkID", OtherKey:="WalkID", IsForeignKey:=true)>  _
		Public Property Walk() As Walk
			Get
				Return Me._Walk.Entity
			End Get
			Set
				Dim previousValue As Walk = Me._Walk.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Walk.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Walk.Entity = Nothing
						previousValue.Walk_AssociatedFiles.Remove(Me)
					End If
					Me._Walk.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Walk_AssociatedFiles.Add(Me)
						Me._WalkID = value.WalkID
					Else
						Me._WalkID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Walk")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Walks")>  _
	Partial Public Class Walk
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _WalkID As Integer
		
		Private _WalkDate As Date
		
		Private _WalkDescription As String
		
		Private _WalkTitle As String
		
		Private _WalkSummary As String
		
		Private _WalkStartPoint As String
		
		Private _WalkEndPoint As String
		
		Private _WalkType As String
		
		Private _WalkAreaName As String
		
		Private _CartographicLength As System.Nullable(Of Double)
		
		Private _MetresOfAscent As System.Nullable(Of Short)
		
		Private _WalkCompanions As String
		
		Private _WalkTotalTime As System.Nullable(Of Integer)
		
		Private _WalkAverageSpeedKmh As System.Nullable(Of Double)
		
		Private _MovingAverageKmh As System.Nullable(Of Double)
		
		Private _WalkConditions As String
		
		Private _HillAscents As EntitySet(Of HillAscent)
		
		Private _Markers As EntitySet(Of Marker)
		
		Private _Marker_Observations As EntitySet(Of Marker_Observation)
		
		Private _Walk_AssociatedFiles As EntitySet(Of Walk_AssociatedFile)
		
		Private _Area As EntityRef(Of Area)
		
		Private _WalkType1 As EntityRef(Of WalkType)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWalkIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWalkIDChanged()
    End Sub
    Partial Private Sub OnWalkDateChanging(value As Date)
    End Sub
    Partial Private Sub OnWalkDateChanged()
    End Sub
    Partial Private Sub OnWalkDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnWalkDescriptionChanged()
    End Sub
    Partial Private Sub OnWalkTitleChanging(value As String)
    End Sub
    Partial Private Sub OnWalkTitleChanged()
    End Sub
    Partial Private Sub OnWalkSummaryChanging(value As String)
    End Sub
    Partial Private Sub OnWalkSummaryChanged()
    End Sub
    Partial Private Sub OnWalkStartPointChanging(value As String)
    End Sub
    Partial Private Sub OnWalkStartPointChanged()
    End Sub
    Partial Private Sub OnWalkEndPointChanging(value As String)
    End Sub
    Partial Private Sub OnWalkEndPointChanged()
    End Sub
    Partial Private Sub OnWalkTypeChanging(value As String)
    End Sub
    Partial Private Sub OnWalkTypeChanged()
    End Sub
    Partial Private Sub OnWalkAreaNameChanging(value As String)
    End Sub
    Partial Private Sub OnWalkAreaNameChanged()
    End Sub
    Partial Private Sub OnCartographicLengthChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCartographicLengthChanged()
    End Sub
    Partial Private Sub OnMetresOfAscentChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMetresOfAscentChanged()
    End Sub
    Partial Private Sub OnWalkCompanionsChanging(value As String)
    End Sub
    Partial Private Sub OnWalkCompanionsChanged()
    End Sub
    Partial Private Sub OnWalkTotalTimeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnWalkTotalTimeChanged()
    End Sub
    Partial Private Sub OnWalkAverageSpeedKmhChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnWalkAverageSpeedKmhChanged()
    End Sub
    Partial Private Sub OnMovingAverageKmhChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnMovingAverageKmhChanged()
    End Sub
    Partial Private Sub OnWalkConditionsChanging(value As String)
    End Sub
    Partial Private Sub OnWalkConditionsChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._HillAscents = New EntitySet(Of HillAscent)(AddressOf Me.attach_HillAscents, AddressOf Me.detach_HillAscents)
			Me._Markers = New EntitySet(Of Marker)(AddressOf Me.attach_Markers, AddressOf Me.detach_Markers)
			Me._Marker_Observations = New EntitySet(Of Marker_Observation)(AddressOf Me.attach_Marker_Observations, AddressOf Me.detach_Marker_Observations)
			Me._Walk_AssociatedFiles = New EntitySet(Of Walk_AssociatedFile)(AddressOf Me.attach_Walk_AssociatedFiles, AddressOf Me.detach_Walk_AssociatedFiles)
			Me._Area = CType(Nothing, EntityRef(Of Area))
			Me._WalkType1 = CType(Nothing, EntityRef(Of WalkType))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property WalkID() As Integer
			Get
				Return Me._WalkID
			End Get
			Set
				If ((Me._WalkID = value)  _
							= false) Then
					Me.OnWalkIDChanging(value)
					Me.SendPropertyChanging
					Me._WalkID = value
					Me.SendPropertyChanged("WalkID")
					Me.OnWalkIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkDate", DbType:="DateTime NOT NULL")>  _
		Public Property WalkDate() As Date
			Get
				Return Me._WalkDate
			End Get
			Set
				If ((Me._WalkDate = value)  _
							= false) Then
					Me.OnWalkDateChanging(value)
					Me.SendPropertyChanging
					Me._WalkDate = value
					Me.SendPropertyChanged("WalkDate")
					Me.OnWalkDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkDescription", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property WalkDescription() As String
			Get
				Return Me._WalkDescription
			End Get
			Set
				If (String.Equals(Me._WalkDescription, value) = false) Then
					Me.OnWalkDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._WalkDescription = value
					Me.SendPropertyChanged("WalkDescription")
					Me.OnWalkDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkTitle", DbType:="NVarChar(100)")>  _
		Public Property WalkTitle() As String
			Get
				Return Me._WalkTitle
			End Get
			Set
				If (String.Equals(Me._WalkTitle, value) = false) Then
					Me.OnWalkTitleChanging(value)
					Me.SendPropertyChanging
					Me._WalkTitle = value
					Me.SendPropertyChanged("WalkTitle")
					Me.OnWalkTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkSummary", DbType:="NVarChar(1000)")>  _
		Public Property WalkSummary() As String
			Get
				Return Me._WalkSummary
			End Get
			Set
				If (String.Equals(Me._WalkSummary, value) = false) Then
					Me.OnWalkSummaryChanging(value)
					Me.SendPropertyChanging
					Me._WalkSummary = value
					Me.SendPropertyChanged("WalkSummary")
					Me.OnWalkSummaryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkStartPoint", DbType:="NVarChar(100)")>  _
		Public Property WalkStartPoint() As String
			Get
				Return Me._WalkStartPoint
			End Get
			Set
				If (String.Equals(Me._WalkStartPoint, value) = false) Then
					Me.OnWalkStartPointChanging(value)
					Me.SendPropertyChanging
					Me._WalkStartPoint = value
					Me.SendPropertyChanged("WalkStartPoint")
					Me.OnWalkStartPointChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkEndPoint", DbType:="NVarChar(100)")>  _
		Public Property WalkEndPoint() As String
			Get
				Return Me._WalkEndPoint
			End Get
			Set
				If (String.Equals(Me._WalkEndPoint, value) = false) Then
					Me.OnWalkEndPointChanging(value)
					Me.SendPropertyChanging
					Me._WalkEndPoint = value
					Me.SendPropertyChanged("WalkEndPoint")
					Me.OnWalkEndPointChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkType", DbType:="NVarChar(30) NOT NULL", CanBeNull:=false)>  _
		Public Property WalkType() As String
			Get
				Return Me._WalkType
			End Get
			Set
				If (String.Equals(Me._WalkType, value) = false) Then
					If Me._WalkType1.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnWalkTypeChanging(value)
					Me.SendPropertyChanging
					Me._WalkType = value
					Me.SendPropertyChanged("WalkType")
					Me.OnWalkTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkAreaName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property WalkAreaName() As String
			Get
				Return Me._WalkAreaName
			End Get
			Set
				If (String.Equals(Me._WalkAreaName, value) = false) Then
					If Me._Area.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnWalkAreaNameChanging(value)
					Me.SendPropertyChanging
					Me._WalkAreaName = value
					Me.SendPropertyChanged("WalkAreaName")
					Me.OnWalkAreaNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CartographicLength", DbType:="Float")>  _
		Public Property CartographicLength() As System.Nullable(Of Double)
			Get
				Return Me._CartographicLength
			End Get
			Set
				If (Me._CartographicLength.Equals(value) = false) Then
					Me.OnCartographicLengthChanging(value)
					Me.SendPropertyChanging
					Me._CartographicLength = value
					Me.SendPropertyChanged("CartographicLength")
					Me.OnCartographicLengthChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetresOfAscent", DbType:="SmallInt")>  _
		Public Property MetresOfAscent() As System.Nullable(Of Short)
			Get
				Return Me._MetresOfAscent
			End Get
			Set
				If (Me._MetresOfAscent.Equals(value) = false) Then
					Me.OnMetresOfAscentChanging(value)
					Me.SendPropertyChanging
					Me._MetresOfAscent = value
					Me.SendPropertyChanged("MetresOfAscent")
					Me.OnMetresOfAscentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkCompanions", DbType:="NVarChar(50)")>  _
		Public Property WalkCompanions() As String
			Get
				Return Me._WalkCompanions
			End Get
			Set
				If (String.Equals(Me._WalkCompanions, value) = false) Then
					Me.OnWalkCompanionsChanging(value)
					Me.SendPropertyChanging
					Me._WalkCompanions = value
					Me.SendPropertyChanged("WalkCompanions")
					Me.OnWalkCompanionsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkTotalTime", DbType:="Int")>  _
		Public Property WalkTotalTime() As System.Nullable(Of Integer)
			Get
				Return Me._WalkTotalTime
			End Get
			Set
				If (Me._WalkTotalTime.Equals(value) = false) Then
					Me.OnWalkTotalTimeChanging(value)
					Me.SendPropertyChanging
					Me._WalkTotalTime = value
					Me.SendPropertyChanged("WalkTotalTime")
					Me.OnWalkTotalTimeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkAverageSpeedKmh", DbType:="Float")>  _
		Public Property WalkAverageSpeedKmh() As System.Nullable(Of Double)
			Get
				Return Me._WalkAverageSpeedKmh
			End Get
			Set
				If (Me._WalkAverageSpeedKmh.Equals(value) = false) Then
					Me.OnWalkAverageSpeedKmhChanging(value)
					Me.SendPropertyChanging
					Me._WalkAverageSpeedKmh = value
					Me.SendPropertyChanged("WalkAverageSpeedKmh")
					Me.OnWalkAverageSpeedKmhChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MovingAverageKmh", DbType:="Float")>  _
		Public Property MovingAverageKmh() As System.Nullable(Of Double)
			Get
				Return Me._MovingAverageKmh
			End Get
			Set
				If (Me._MovingAverageKmh.Equals(value) = false) Then
					Me.OnMovingAverageKmhChanging(value)
					Me.SendPropertyChanging
					Me._MovingAverageKmh = value
					Me.SendPropertyChanged("MovingAverageKmh")
					Me.OnMovingAverageKmhChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WalkConditions", DbType:="NVarChar(200)")>  _
		Public Property WalkConditions() As String
			Get
				Return Me._WalkConditions
			End Get
			Set
				If (String.Equals(Me._WalkConditions, value) = false) Then
					Me.OnWalkConditionsChanging(value)
					Me.SendPropertyChanging
					Me._WalkConditions = value
					Me.SendPropertyChanged("WalkConditions")
					Me.OnWalkConditionsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Walk_HillAscent", Storage:="_HillAscents", ThisKey:="WalkID", OtherKey:="WalkID")>  _
		Public Property HillAscents() As EntitySet(Of HillAscent)
			Get
				Return Me._HillAscents
			End Get
			Set
				Me._HillAscents.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Walk_Marker", Storage:="_Markers", ThisKey:="WalkID", OtherKey:="WalkID")>  _
		Public Property Markers() As EntitySet(Of Marker)
			Get
				Return Me._Markers
			End Get
			Set
				Me._Markers.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Walk_Marker_Observation", Storage:="_Marker_Observations", ThisKey:="WalkID", OtherKey:="WalkID")>  _
		Public Property Marker_Observations() As EntitySet(Of Marker_Observation)
			Get
				Return Me._Marker_Observations
			End Get
			Set
				Me._Marker_Observations.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Walk_Walk_AssociatedFile", Storage:="_Walk_AssociatedFiles", ThisKey:="WalkID", OtherKey:="WalkID")>  _
		Public Property Walk_AssociatedFiles() As EntitySet(Of Walk_AssociatedFile)
			Get
				Return Me._Walk_AssociatedFiles
			End Get
			Set
				Me._Walk_AssociatedFiles.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Area_Walk", Storage:="_Area", ThisKey:="WalkAreaName", OtherKey:="Areaname", IsForeignKey:=true)>  _
		Public Property Area() As Area
			Get
				Return Me._Area.Entity
			End Get
			Set
				Dim previousValue As Area = Me._Area.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Area.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Area.Entity = Nothing
						previousValue.Walks.Remove(Me)
					End If
					Me._Area.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Walks.Add(Me)
						Me._WalkAreaName = value.Areaname
					Else
						Me._WalkAreaName = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Area")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="WalkType_Walk", Storage:="_WalkType1", ThisKey:="WalkType", OtherKey:="WalkTypeString", IsForeignKey:=true)>  _
		Public Property WalkType1() As WalkType
			Get
				Return Me._WalkType1.Entity
			End Get
			Set
				Dim previousValue As WalkType = Me._WalkType1.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._WalkType1.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._WalkType1.Entity = Nothing
						previousValue.Walks.Remove(Me)
					End If
					Me._WalkType1.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Walks.Add(Me)
						Me._WalkType = value.WalkTypeString
					Else
						Me._WalkType = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("WalkType1")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_HillAscents(ByVal entity As HillAscent)
			Me.SendPropertyChanging
			entity.Walk = Me
		End Sub
		
		Private Sub detach_HillAscents(ByVal entity As HillAscent)
			Me.SendPropertyChanging
			entity.Walk = Nothing
		End Sub
		
		Private Sub attach_Markers(ByVal entity As Marker)
			Me.SendPropertyChanging
			entity.Walk = Me
		End Sub
		
		Private Sub detach_Markers(ByVal entity As Marker)
			Me.SendPropertyChanging
			entity.Walk = Nothing
		End Sub
		
		Private Sub attach_Marker_Observations(ByVal entity As Marker_Observation)
			Me.SendPropertyChanging
			entity.Walk = Me
		End Sub
		
		Private Sub detach_Marker_Observations(ByVal entity As Marker_Observation)
			Me.SendPropertyChanging
			entity.Walk = Nothing
		End Sub
		
		Private Sub attach_Walk_AssociatedFiles(ByVal entity As Walk_AssociatedFile)
			Me.SendPropertyChanging
			entity.Walk = Me
		End Sub
		
		Private Sub detach_Walk_AssociatedFiles(ByVal entity As Walk_AssociatedFile)
			Me.SendPropertyChanging
			entity.Walk = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
	Partial Public Class MyProgress
		
		Private _NumberClimbed As Integer
		
		Private _TotalHills As Integer
		
		Private _ClassRef As String
		
		Private _ClassName As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberClimbed")>  _
		Public Property NumberClimbed() As Integer
			Get
				Return Me._NumberClimbed
			End Get
			Set
				If ((Me._NumberClimbed = value)  _
							= false) Then
					Me._NumberClimbed = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalHills")>  _
		Public Property TotalHills() As Integer
			Get
				Return Me._TotalHills
			End Get
			Set
				If ((Me._TotalHills = value)  _
							= false) Then
					Me._TotalHills = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClassRef", CanBeNull:=false)>  _
		Public Property ClassRef() As String
			Get
				Return Me._ClassRef
			End Get
			Set
				If (String.Equals(Me._ClassRef, value) = false) Then
					Me._ClassRef = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClassName", CanBeNull:=false)>  _
		Public Property ClassName() As String
			Get
				Return Me._ClassName
			End Get
			Set
				If (String.Equals(Me._ClassName, value) = false) Then
					Me._ClassName = value
				End If
			End Set
		End Property
	End Class
End Namespace
